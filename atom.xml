<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vkcyan</title>
  
  <subtitle>this is my life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-19T11:44:35.405Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>vkcyan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/04/19/vscode%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://yoursite.com/2020/04/19/vscode自定义代码片段/</id>
    <published>2020-04-19T11:44:35.404Z</published>
    <updated>2020-04-19T11:44:35.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode自定义代码片段-让编码起飞"><a href="#vscode自定义代码片段-让编码起飞" class="headerlink" title="vscode自定义代码片段,让编码起飞"></a>vscode自定义代码片段,让编码起飞</h1><p><img src="http://www.vkcyan.top/FoDZ3XVV16dPuwbHwTMNuq8qwncB.jpg" alt=""></p><p>​    转眼之间已经到了2020年,已经是是写代码的第三个年头了,奈何技术深度仍然尚浅,想要独当一面还需要努力</p><p>​    最近在写uniapp的时候有个烦恼,也就是代码提示实在是让人非常难受</p><p>​    <img src="http://www.vkcyan.top/FqWvOsbmgPPT3KPBJ9fuJ6kd2Ewv.gif" alt=""></p><p>写<code>view</code>标签之前必须要打<code>&lt;</code>,实在是让人难受,而直接写view也咩有提示,编码体验很差</p><p>我们能不能让敲出<code>view</code>的时候就给我提示<code>&lt;view class=&#39;&#39;&gt;&lt;/view&gt;</code>呢,这样一定会编码飞起</p><p>所以我们要借助vscode提供的<strong>自定义代码片段功能</strong></p><p><img src="http://www.vkcyan.top/FpuY2mvBtKISEp2JNP5w3MWAbkWY.png" alt=""></p><p>首先我们点击到<strong>文件&gt;首选项&gt;用户代码片段</strong></p><p><img src="http://www.vkcyan.top/FkYTY_awInPXaWhVyBBuIJwiPXza.png" alt=""></p><p>找到当前语言对应的配置文件,例如我当前项目是vue的,并且需要的是<code>template</code>的提示,所以我需要编辑<code>vue-html.json</code></p><p>在自定义代码判断之前需要了解他的字段含义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prefix      :代码片段名字，即输入此名字就可以调用代码片段。</span><br><span class="line">body        :这个是代码段的主体.需要编写的代码放在这里,　　　　　 </span><br><span class="line">$1          :生成代码后光标的初始位置.</span><br><span class="line">$2          :生成代码后光标的第二个位置,按tab键可进行快速切换,还可以有$3,$4,$5.....</span><br><span class="line">$&#123;1,字符&#125;    :生成代码后光标的初始位置(其中1表示光标开始的序号，字符表示生成代码后光标会直接选中字符。)</span><br><span class="line">description :代码段描述,输入名字后编辑器显示的提示信息。</span><br></pre></td></tr></table></figure><p>以及书写规则</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"Print to console": &#123;</span><br><span class="line">    "prefix": "log",</span><br><span class="line">    "body": [</span><br><span class="line">        "console.log('$1');",</span><br><span class="line">        <span class="string">"$2"</span></span><br><span class="line">    ],</span><br><span class="line">    "description": "Log output to console"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会主需要了解其简单的规则就可以去完成我们的目标了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">// Place your snippets for vue-html here. Each snippet is defined under a snippet name and has a prefix, body and </span><br><span class="line">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><br><span class="line">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span><br><span class="line">// same ids are connected.</span><br><span class="line">// Example:</span><br><span class="line">"view": &#123;</span><br><span class="line">"prefix": "view",</span><br><span class="line">"body": [</span><br><span class="line"><span class="string">"&lt;view class='$0'&gt;&lt;/view&gt;"</span></span><br><span class="line">],</span><br><span class="line">"description": "uni基础视图组件"</span><br><span class="line">&#125;,</span><br><span class="line">"text": &#123;</span><br><span class="line">"prefix": "text",</span><br><span class="line">"body": [</span><br><span class="line"><span class="string">"&lt;text class='$0'&gt;&lt;/text&gt;"</span></span><br><span class="line">],</span><br><span class="line">"description": "uni基础文字组件"</span><br><span class="line">&#125;,</span><br><span class="line">"button": &#123;</span><br><span class="line">"prefix": "button",</span><br><span class="line">"body": [</span><br><span class="line"><span class="string">"&lt;button class='$0'&gt;&lt;/button&gt;"</span></span><br><span class="line">],</span><br><span class="line">"description": "uni基础按钮组件"</span><br><span class="line">&#125;,</span><br><span class="line">"image": &#123;</span><br><span class="line">"prefix": "image",</span><br><span class="line">"body": [</span><br><span class="line"><span class="string">"&lt;image class='$0'/&gt;"</span></span><br><span class="line">],</span><br><span class="line">"description": "uni基础图片组件"</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们保存完毕之后,再试使用就会发现输入<code>view</code>就会发现我们自定义的代码片段完成了</p><p><img src="http://www.vkcyan.top/Fr73WvNZBi8zxIc02z2HC6ptLefY.gif" alt=""></p><p>自定义代码片段还可以定义很多常用的代码片段</p><p>例如自定义一段vue的代码模板(注意不是vue-html.json)</p><p><strong>vue.json</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">// Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and </span><br><span class="line">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><br><span class="line">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span><br><span class="line">// same ids are connected.</span><br><span class="line">// Example:</span><br><span class="line">"baseVue": &#123;</span><br><span class="line">"prefix": "baseVue",</span><br><span class="line">"body": [</span><br><span class="line">"&lt;script lang='ts'&gt;",</span><br><span class="line">"import Vue from 'vue';",</span><br><span class="line">" export default Vue.extend (&#123;",</span><br><span class="line">"   data () &#123;",</span><br><span class="line">"     return &#123;\n",</span><br><span class="line">"     &#125;",</span><br><span class="line">"   &#125;,",</span><br><span class="line">"   components: &#123;\n",</span><br><span class="line">"   &#125;",</span><br><span class="line">" &#125;)",</span><br><span class="line">"&lt;/script&gt;\n",</span><br><span class="line">],</span><br><span class="line">"description": "vuets基础模板"</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.vkcyan.top/Ft3X_oJLM2e5mMPhplc6Dz_FxdNs.gif" alt=""></p><p>​            </p><p>是不是非常好用呢~~~</p><p>如果想了解更多请看官方文档<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">Visual Studio代码中的代码片段</a></p><p>自定义代码判断就是下载的插件的功能,也就是<code>自定义snippet</code>,你学会了吗?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vscode自定义代码片段-让编码起飞&quot;&gt;&lt;a href=&quot;#vscode自定义代码片段-让编码起飞&quot; class=&quot;headerlink&quot; title=&quot;vscode自定义代码片段,让编码起飞&quot;&gt;&lt;/a&gt;vscode自定义代码片段,让编码起飞&lt;/h1&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/04/19/%E8%BD%BB%E9%87%8F%E7%BA%A7%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/04/19/轻量级代码自动部署/</id>
    <published>2020-04-19T11:44:35.366Z</published>
    <updated>2020-04-19T11:44:35.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="轻量级前端代码自动部署"><a href="#轻量级前端代码自动部署" class="headerlink" title="轻量级前端代码自动部署"></a>轻量级前端代码自动部署</h1><h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p>公司目前的更新代码流程</p><ul><li>1.打包，本地运行<code>npm run build</code>打包生成dist文件夹。</li><li>2.ssh连接服务器，切换路径到web对应目录下。</li><li>3.上传代码到web目录，一般通过xshell或者xftp完成。</li></ul><p><img src="http://www.vkcyan.top/FiPe_ApYEBjOZost-STorq1Rf0pT.png" style="zoom:100%;"></p><p>这样更新代码，是纯手动更新，存在很多问题</p><ul><li>全部流程纯手动完成，容易出现上传错误，忘记备份，备份文件难以管理等可能非常危险的事情</li><li>当负责多个项目且每个项目都具有测试环境和线上环境时，容易引起部署错误。</li><li>备份以及上传过程，全部是手动完成，在更新操作的那段时间是无法访问的</li><li>开发体验差，每次都需要等打包完成，再去链接ssh，并找文件位置，再上传文件</li></ul><p>这样的模式从我到公司到现在一直都这样，我或许比较熟悉，再稍加注意点，一般不会出现上传失误的问题，但是随着团队人员的使用，以及个人长期的这样上传，无法保证不会出现难以估量的失误</p><h2 id="调研"><a href="#调研" class="headerlink" title="调研"></a>调研</h2><p>最早期是2019年8月份的时候，我想使用git hooks，Jenkins这样的自动部署工具，后面发现配置还挺复杂的，而且我们那时候还是开发阶段，没有上线，测试机是win7的，ssh无法连接测试机，后面也遇到了很多问题，采用jenkins部署是很方便，但是也存在安装配置麻烦、打包占用服务器资源等缺点。一直不成功，以及当时线上不是现在的情况，所以后面就放弃了</p><h2 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h2><p>能不能在我打包代码完成的同时就上传代码，自动去部署到服务器上面呢?</p><p>经过我仔细的调研后发现需要</p><ul><li><strong>node-ssh</strong>连接线上服务器</li><li><strong>archiver</strong>打包本地文件</li><li><strong>inquirer</strong>命令行效验</li><li>fs模块生成文档流</li><li>path模块获取项目路径</li><li>child_process模块控制命令进程</li></ul><p>使用以上工具以及node原生api来完成我们的需求</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>现在的流程全部自动化，一行代码完成备份以及部署</p><p><img src="C:\Users\spring\AppData\Roaming\Typora\typora-user-images\image-20200116152743353.png" alt=""></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="增加命令"><a href="#增加命令" class="headerlink" title="增加命令"></a>增加命令</h3><p>在项目目录下增加<code>build/upload.js</code></p><p>在package.json中增加npm脚本命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"upload:h5_uni": "node build/upload.js --obj=h5_uni"，</span><br><span class="line">"upload:h5": "node build/upload.js --prod--obj=h5"</span><br></pre></td></tr></table></figure><p>当执行<code>npm run upload:h5</code>的时候，会执行build/upload.js的代码</p><h3 id="部署二次确认"><a href="#部署二次确认" class="headerlink" title="部署二次确认"></a>部署二次确认</h3><blockquote><p>防止因为粗心大意上传到错误的地方，所以加了上传校验</p><p>此处使用<code>inquirer</code>库来完成命令行交互</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前平台</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> objName = process.argv[process.argv.length - <span class="number">1</span>].split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> promptList = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">"input"</span>，</span><br><span class="line">    message: <span class="string">"请确认当前更新项目"</span>，</span><br><span class="line">    name: <span class="string">"objName"</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line">inquirer.prompt(promptList).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (answers.objName == objName) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;objName&#125;</span>开始更新`</span>);</span><br><span class="line">    <span class="keyword">let</span> buildcmd = exec(<span class="string">"npm run build:h5"</span>， (error， stdout， stderr) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"打包完成"</span>， stdout);</span><br><span class="line">        app();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"打包出现错误"</span>， stderr);</span><br><span class="line">        process.exit(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    buildcmd.stdout.on(<span class="string">"data"</span>， data =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">`项目名称出错，请检查后在更新`</span>);</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="http://www.vkcyan.top/Fn7W5qunPFnUDhMjDKtIdE8Js59_.png" alt=""></p><p>这里我更新h5_uni，我必须输入<strong>h5_uni</strong>，才可以继续执行，否则就会失败</p><h3 id="链接ssh线上服务器"><a href="#链接ssh线上服务器" class="headerlink" title="链接ssh线上服务器"></a>链接ssh线上服务器</h3><blockquote><p>此处使用<code>node-ssh</code>作为链接ssh工具</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过ssh链接服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">app</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ssh</span><br><span class="line">    .connect(&#123;</span><br><span class="line">      host: config.host，</span><br><span class="line">      username: config.username，</span><br><span class="line">      password: config.password</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      runcmd();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="备份之前项目"><a href="#备份之前项目" class="headerlink" title="备份之前项目"></a>备份之前项目</h3><blockquote><p>如果不存在项目，就直接上传</p><p>存在项目，就按当前用户名+backup+当前时间戳的形式备份到当前文件目录下的backup目录下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行ssh命令 判断当前是否存在备份</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runcmd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ssh</span><br><span class="line">    .execCommand(<span class="string">"ls"</span>， &#123;</span><br><span class="line">      cwd: config.uploadDir</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.stdout) &#123;</span><br><span class="line">        <span class="keyword">let</span> fileList = res.stdout.split(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (fileList.includes(config.objname)) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"检测到项目，开始进行备份"</span>);</span><br><span class="line">          backupData();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"未检测到项目，开始进行上传"</span>);</span><br><span class="line">          uploadData();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.stderr) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"查询指定目录失败"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ssh链接发生了错误"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 备份项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backupData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ssh</span><br><span class="line">    .execCommand(</span><br><span class="line">      <span class="string">`mv <span class="subst">$&#123;config.objname&#125;</span> backup/<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">        config.objname</span></span></span><br><span class="line"><span class="string"><span class="subst">      &#125;</span>_backup<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>`</span>，</span><br><span class="line">      &#123;</span><br><span class="line">        cwd: config.uploadDir</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.stderr) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"备份发生错误"</span>， res.stderr);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"完成备份，开始上传最新代码"</span>);</span><br><span class="line">        uploadData();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"备份发生未知链接错误"</span>， err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将打包完成的代码进行压缩并上传"><a href="#将打包完成的代码进行压缩并上传" class="headerlink" title="将打包完成的代码进行压缩并上传"></a>将打包完成的代码进行压缩并上传</h3><blockquote><p>写入文件使用node fs 流模块</p><p>打包使用archiver完成</p><p>最后通过ssh进行压缩包上传</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传代码 压缩现有代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建文件输出流</span></span><br><span class="line">  <span class="keyword">let</span> output = fs.createWriteStream(</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;path.join(__dirname， <span class="string">"../"</span>)&#125;</span><span class="subst">$&#123;config.buildPath&#125;</span>/<span class="subst">$&#123;config.objname&#125;</span>.zip`</span></span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 设置压缩级别</span></span><br><span class="line">  <span class="keyword">let</span> archive = archiver(<span class="string">"zip"</span>， &#123;</span><br><span class="line">    zlib: &#123;</span><br><span class="line">      level: <span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 存档警告</span></span><br><span class="line">  archive.on(<span class="string">"warning"</span>， <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err.code === <span class="string">"ENOENT"</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">"stat故障和其他非阻塞错误"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 存档出错</span></span><br><span class="line">  archive.on(<span class="string">"error"</span>， <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 通过管道方法将输出流存档到文件</span></span><br><span class="line">  archive.pipe(output);</span><br><span class="line">  archive.directory(</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;path.join(__dirname， <span class="string">"../"</span>)&#125;</span><span class="subst">$&#123;config.buildPath&#125;</span>/<span class="subst">$&#123;config.buildobj&#125;</span>`</span>，</span><br><span class="line">    <span class="string">"/"</span></span><br><span class="line">  );</span><br><span class="line">  archive.finalize();</span><br><span class="line">  <span class="comment">// 文件输出流结束</span></span><br><span class="line">  output.on(<span class="string">"close"</span>， <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`总共 <span class="subst">$&#123;archive.pointer()&#125;</span> 字节，完成源代码压缩`</span>);</span><br><span class="line">    ssh</span><br><span class="line">      .putFile(</span><br><span class="line">        <span class="string">`<span class="subst">$&#123;path.join(__dirname， <span class="string">"../"</span>)&#125;</span><span class="subst">$&#123;config.buildPath&#125;</span>/<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">          config.objname</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span>.zip`</span>，</span><br><span class="line">        <span class="string">`<span class="subst">$&#123;config.uploadDir&#125;</span>/<span class="subst">$&#123;config.objname&#125;</span>.zip`</span></span><br><span class="line">      )</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"程序zip上传成功，开始执行解压操作"</span>);</span><br><span class="line">        cmdunzip();</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解压zip完成部署，最后删除本地缓存"><a href="#解压zip完成部署，最后删除本地缓存" class="headerlink" title="解压zip完成部署，最后删除本地缓存"></a>解压zip完成部署，最后删除本地缓存</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解压最新代码zip</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cmdunzip</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ssh</span><br><span class="line">    .execCommand(</span><br><span class="line">      <span class="string">`unzip -o -d <span class="subst">$&#123;config.uploadDir&#125;</span>/<span class="subst">$&#123;config.objname&#125;</span> <span class="subst">$&#123;config.objname&#125;</span>.zip  &amp;&amp; rm -f <span class="subst">$&#123;config.objname&#125;</span>.zip`</span>，</span><br><span class="line">      &#123;</span><br><span class="line">        cwd: config.uploadDir</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`项目包完成解压，<span class="subst">$&#123;config.objname&#125;</span>项目部署成功了`</span>);</span><br><span class="line">      deletelocalFile().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"本地缓存zip清除完毕"</span>);</span><br><span class="line">        process.exit(<span class="number">0</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *删除本地生成的压缩包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deletelocalFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve， reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.unlink(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;path.join(__dirname， <span class="string">"../"</span>)&#125;</span><span class="subst">$&#123;config.buildPath&#125;</span>/<span class="subst">$&#123;config.objname&#125;</span>.zip`</span>，</span><br><span class="line">      err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>实际打包效果</p><p><img src="http://www.vkcyan.top/FgL8QlD9llI053dYYB3bSdubCtMr.png" style="zoom:100%;"></p><p>目前这种前端部署方案已经在使用中了，目前来看</p><ul><li>使用命令更新很安全，不需要担心忘了备份，上传/删除错地方</li><li>很高效，全部更新操作，一行命令解决</li><li>后面计划成为npm包，所有的项目都可以通过简单的配置完成自动打包部署</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;轻量级前端代码自动部署&quot;&gt;&lt;a href=&quot;#轻量级前端代码自动部署&quot; class=&quot;headerlink&quot; title=&quot;轻量级前端代码自动部署&quot;&gt;&lt;/a&gt;轻量级前端代码自动部署&lt;/h1&gt;&lt;h2 id=&quot;痛点&quot;&gt;&lt;a href=&quot;#痛点&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/04/19/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0h5%E9%A1%B5%E9%9D%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/04/19/前端如何实现h5页面搭建/</id>
    <published>2020-04-19T11:44:35.332Z</published>
    <updated>2020-04-19T11:44:35.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端如何实现h5页面搭建"><a href="#前端如何实现h5页面搭建" class="headerlink" title="前端如何实现h5页面搭建"></a>前端如何实现h5页面搭建</h1><blockquote><p>前端工程师是有极限的</p><p>我从短暂的工作当中学到一件事……</p><p>越是熬夜加班，就越会发现人类的能力是有极限的……</p><p>除非超越产品</p><p>我不加班了！！BOSS</p></blockquote><blockquote><p>拖拽生成h5页面，支持动画，模板，保存组件，第三方后台接入提交数据，欢迎体验</p><p>基于vue搭建营销h5页面 <a href="http://121.36.37.117/docs/home" target="_blank" rel="noopener">易动</a> 已上线，欢迎体验~~</p></blockquote><ul><li><a href="https://github.com/vkcyan/activity_generate" target="_blank" rel="noopener">activity_generate</a> 后台</li><li><a href="https://github.com/vkcyan/activity_mobile" target="_blank" rel="noopener">activity_mobile</a> 客户端</li><li><a href="https://github.com/vkcyan/activity_server" target="_blank" rel="noopener">activity_server</a> 后端</li></ul><p>开源不易，给个start吧~</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>面对频繁变更的页面需求，面对客户像爱情一样的的需求（文字小一点，边距小一点），你是不是也曾经抓狂过，是不是也想说出心里的声音，我不想加班</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/18/170ec32dc1986ad3?w=91&amp;h=69&amp;f=jpeg&amp;s=1221" alt="img"></p><p>所以对于特定的业务场景，例如活动页面，以及首页，这种经常需要修改的页面，完全可以通过搭建进行完成，目前市场上搭建前端页面可以分为两类</p><ol><li>易企秀 此类交互偏弱，但是组件是基于基础组件的，并且调整更加灵活，可上下左右拖拽，例如按钮，图片</li><li>有赞、酷客多 基于业务组件进行搭建，此类偏固定，组件以行为单位，只可调整上下，例如搜索组件、活动组件，图片组组件</li></ol><p><img src="https://user-gold-cdn.xitu.io/2020/3/18/170ec32dc5511100?w=2202&amp;h=1392&amp;f=png&amp;s=2280402" alt="img"></p><blockquote><p>实现方式是很多种的，本文提出的是一种比较通俗易懂的实现方案，如果想深入了解，请了解大厂的相关产品实现方案</p></blockquote><p>这两种实现方案是不一样的</p><p>基于基础组件形式的拖拽：使用鼠标监听的形式</p><p>基于业务组件形式的拖拽：使用拖拽库 sortable.js即可满足需求</p><p>注：本文主要讲述基于基础组件的实现</p><h3 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h3><h4 id="核心实现思路"><a href="#核心实现思路" class="headerlink" title="核心实现思路"></a>核心实现思路</h4><p><img src="http://www.vkcyan.top/FkcjTGonEfjgHQpZ4SnvftibzMIS.png" alt="img"></p><p>是的，核心思路就是这么简单，</p><h4 id="定制组件数据结构"><a href="#定制组件数据结构" class="headerlink" title="定制组件数据结构"></a>定制组件数据结构</h4><p>例如 基础按钮组件,也就是bottom的抽象数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按钮的vuex数据映射关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">baseButtom</span>(<span class="params">store: any</span>): <span class="title">baseNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dynamic = store.template.length * <span class="number">10</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    activityId: guid(),</span><br><span class="line">    editStatus: <span class="literal">false</span>,</span><br><span class="line">    name: <span class="string">'base-buttom'</span>,</span><br><span class="line">    text: <span class="string">'按钮'</span>,</span><br><span class="line">    option: &#123;</span><br><span class="line">      btnType: <span class="number">0</span>, <span class="comment">// 0 无事件 1 外部链接 2 提交表单 3</span></span><br><span class="line">      refInput: [], <span class="comment">// 提交的input表单</span></span><br><span class="line">      inputFromUrl: <span class="string">''</span>, <span class="comment">// 数据提交的地址</span></span><br><span class="line">      urlMethod: <span class="string">'get'</span>, <span class="comment">// 提交格式</span></span><br><span class="line">      QQNum: <span class="string">''</span>, <span class="comment">// qq客服</span></span><br><span class="line">      PhoneNum: <span class="string">''</span>, <span class="comment">// 电话客福</span></span><br><span class="line">      link: <span class="string">''</span> <span class="comment">// 按钮点击跳转地址</span></span><br><span class="line">    &#125;,</span><br><span class="line">    css: &#123;</span><br><span class="line">      top: <span class="number">10</span> + dynamic,</span><br><span class="line">      left: <span class="number">10</span> + dynamic,</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">50</span>,</span><br><span class="line">      zIndex: store.template.length + <span class="number">1</span>,</span><br><span class="line">      background: <span class="string">'rgba(241, 241, 241, 1)'</span>,</span><br><span class="line">      color: <span class="string">'rgba(0, 0, 0, 1)'</span>,</span><br><span class="line">      fontSize: <span class="number">18</span>,</span><br><span class="line">      borderColor: <span class="string">'rgba(0, 0, 0, 1)'</span>,</span><br><span class="line">      borderStyle: <span class="string">'solid'</span>,</span><br><span class="line">      borderWidth: <span class="number">0</span>,</span><br><span class="line">      borderRadius: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    animation: &#123;</span><br><span class="line">      animationName: <span class="string">''</span>,</span><br><span class="line">      animationDuration: <span class="number">1000</span>, <span class="comment">// 动画时间</span></span><br><span class="line">      animationDelay: <span class="number">0</span>, <span class="comment">// 延迟时间</span></span><br><span class="line">      animationIterationCount: <span class="number">1</span>, <span class="comment">// 动画执行次数</span></span><br><span class="line">      animationFillMode: <span class="string">'forwards'</span> <span class="comment">// 动画停留最后一帧</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在vuex中维护一个页面数据对象"><a href="#在vuex中维护一个页面数据对象" class="headerlink" title="在vuex中维护一个页面数据对象"></a>在vuex中维护一个页面数据对象</h4><p>每次，我们点击添加组件的时候，我们就在这个组件数据里面push一个组件抽象数据进去</p><p><a href="http://www.vkcyan.top/FmJtXVJLHqO-0P1hqLbwj0SgCmji.mp4" target="_blank" rel="noopener">查看演示</a></p><p>主控台部分使用了vue的动态组件模块 <strong>component</strong>来渲染组件数据</p><p>核心代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;component</span><br><span class="line">  v-<span class="keyword">for</span>=<span class="string">"(item, index) in template"</span> <span class="comment">// vuex中的组件数据表</span></span><br><span class="line">  :key=<span class="string">"index"</span></span><br><span class="line">  :is=<span class="string">"item.name"</span> <span class="comment">// 组件名</span></span><br><span class="line">  :id=<span class="string">"item.activityId"</span> <span class="comment">// 组件id</span></span><br><span class="line">  :css=<span class="string">"item.css"</span> <span class="comment">// 组件样式</span></span><br><span class="line">  :option=<span class="string">"item.option"</span> <span class="comment">// 组件行为</span></span><br><span class="line">&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>只要完成到这里，点击添加组件即可完成</p><h4 id="监听鼠标完成单选，多选拖拽操作"><a href="#监听鼠标完成单选，多选拖拽操作" class="headerlink" title="监听鼠标完成单选，多选拖拽操作"></a>监听鼠标完成单选，多选拖拽操作</h4><p>鼠标拖拽是最消耗性能的地方，所以需要做好优化，去除不必要的程序负担，所以本项目采用一个对鼠标进行进行集中化处理，减少不必要的性能浪费</p><p>监听是否按住ctrl/command 来判断是否进行多选操作，我们只要监听到鼠标事件，并且实时修改vuex中选中的组件的数据，即可实现拖动位置</p><blockquote><p>多选情况下可以进行多选拖拽，多选删除，等等功能</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /activity_generate/src/utils/index.ts</span></span><br><span class="line"><span class="keyword">let</span> indexCenter: any = <span class="literal">null</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局鼠标动作监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initMouse</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  indexCenter = <span class="built_in">document</span>.querySelector(<span class="string">'.index_center'</span>) <span class="comment">// 仅监听拖拽部分鼠标事件</span></span><br><span class="line">  indexCenter.onmouseup = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.isDown || state.roundDown) &#123;</span><br><span class="line">      <span class="comment">// 通知vuex鼠标事件,具体业务请看代码</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  indexCenter.onmousemove = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.isDown) &#123; <span class="comment">// 单选组件</span></span><br><span class="line">      <span class="keyword">let</span> moveX = e.movementX</span><br><span class="line">      <span class="keyword">let</span> moveY = e.movementY</span><br><span class="line">      index.dispatch(<span class="string">'core/updatePosition'</span>, &#123;</span><br><span class="line">        x: moveX,</span><br><span class="line">        y: moveY</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (state.roundDown) &#123; <span class="comment">// 多选组件</span></span><br><span class="line">      <span class="keyword">const</span> data = &#123;</span><br><span class="line">        x: e.movementX,</span><br><span class="line">        y: e.movementY</span><br><span class="line">      &#125;</span><br><span class="line">      index.commit(<span class="string">'core/updateZoom'</span>, data) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卸载监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">uninitMouse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  indexCenter.removeEventListener(<span class="string">'mouseup'</span>, () =&gt; &#123;&#125;)</span><br><span class="line">  indexCenter.removeEventListener(<span class="string">'mousemove'</span>, () =&gt; &#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.vkcyan.top/FtuTbblh0uzXX6e8pRbWTB_-d6g_.mp4" target="_blank" rel="noopener">查看演示</a></p><h4 id="动态修改组件数据"><a href="#动态修改组件数据" class="headerlink" title="动态修改组件数据"></a>动态修改组件数据</h4><p>我们的组件数据是存储在vuex里面，组件即时数据，我们想改变组件样式，只需要改变组件的数据即可</p><p><img src="http://www.vkcyan.top/FuRYbOI3HlwzlCYq-bRMNla_tcaq.png" alt=""></p><p>我们需要获取到存储在vuex中的选中的组件的数据，通过计算属性将其读取到页面，数据使用计算属性的的get/set进行数据更新</p><blockquote><p>项目里面使用的是绑定对象内部属性，改变vuex内部的值，这种做法不提倡，请使用get/set。set中提交commit修改数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可能是单组件 可能是多组件 可能无组件</span></span><br><span class="line">    core() &#123;</span><br><span class="line">      <span class="keyword">let</span> activeCore = <span class="keyword">this</span>.$store.state.core.activeTemplate;</span><br><span class="line">      <span class="keyword">if</span> (activeCore.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> form = <span class="keyword">this</span>.$store.state.core.template.filter(<span class="function"><span class="params">e</span> =&gt;</span></span><br><span class="line">          activeCore.includes(e.activityId)</span><br><span class="line">        )[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> form;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (activeCore.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.core.template.filter(<span class="function"><span class="params">e</span> =&gt;</span></span><br><span class="line">          activeCore.includes(e.activityId)</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>基于这种形式，我们就可以通过修改右侧操作栏进行组件数据的改变</p><p><a href="http://www.vkcyan.top/FvED3dSgozihmOGBLf8VZKd8Rxne.mp4" target="_blank" rel="noopener">查看演示</a></p><h4 id="提交输入框文本到后台的实现"><a href="#提交输入框文本到后台的实现" class="headerlink" title="提交输入框文本到后台的实现"></a>提交输入框文本到后台的实现</h4><blockquote><p>这个商品本身并不附带保存用户数据的接口，是面向企业/开发者的项目，所有表单数据将会提交到手动填写接口</p></blockquote><p>首先给每个input输入框进行命名，名字又啥用？后面你就知道了</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/18/170ec32e295d8316?w=2162&amp;h=436&amp;f=png&amp;s=79107" alt="img"></p><p>接下来我们就可以通过按钮来触发提交事件</p><p>例如： 使用post请求提交username字段到<a href="https://baidu.com" target="_blank" rel="noopener">https://baidu.com</a></p><blockquote><p>预览模式与客户端表现一致</p></blockquote><p><a href="http://www.vkcyan.top/Fn5sjl4gNC-qRTrH_WNqOSpPIhc-.mp4" target="_blank" rel="noopener">查看演示</a></p><p>输入框名字将会作为字段提交到设置好的后台，有了这个功能，即可完成向后台提交数据的功能，生成页面也不再是静态页面，这更加适应营销页面的需求</p><h4 id="动画模块"><a href="#动画模块" class="headerlink" title="动画模块"></a>动画模块</h4><p>对于营销页面而言，动画基本是不太需要的，不过为了拓展项目的适用性，还是需要完成动画模块，这样在支持营销页面的情况下也可以完成推广宣传页面</p><p>动画模块依旧是依赖组件基础映射</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">animation: &#123;</span><br><span class="line">  animationName: <span class="string">''</span>,</span><br><span class="line">  animationDuration: <span class="number">1000</span>, <span class="comment">// 动画时间</span></span><br><span class="line">  animationDelay: <span class="number">0</span>, <span class="comment">// 延迟时间</span></span><br><span class="line">  animationIterationCount: <span class="number">1</span>, <span class="comment">// 动画执行次数</span></span><br><span class="line">  animationFillMode: <span class="string">'forwards'</span> <span class="comment">// 动画停留最后一帧</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>动画系统依赖animation.css，同样适用计算属性进行组件数据的更新</p><p><a href="http://www.vkcyan.top/FsQCAxMucjEuasxDPkFZVALQ0Har.mp4" target="_blank" rel="noopener">查看演示</a></p><h4 id="保存组件为插件"><a href="#保存组件为插件" class="headerlink" title="保存组件为插件"></a>保存组件为插件</h4><p>这里涉及到后端，就不说太多了，简而言之，就是右击组件，保存组件到后台组件表，然后前台再用的用的时候对组件信息进行兼容性处理,这里涉及到自定义右击菜单</p><p>代码为 <code>src/components/rightMenu/index.vue</code></p><h4 id="保存此项目为模板"><a href="#保存此项目为模板" class="headerlink" title="保存此项目为模板"></a>保存此项目为模板</h4><p>同样设计到后端，大概思路为点击保存模板的时候，生成缩略图，并存入模板表，页面数据在存入模板数据表，然后在左侧模板内显示，点击模板的时候获取模板数据，并替换当前页面组件数据，完成模板的功能</p><h4 id="（功能）撤销-反撤销"><a href="#（功能）撤销-反撤销" class="headerlink" title="（功能）撤销/反撤销"></a>（功能）撤销/反撤销</h4><p>这个功能还是在这样类似项目中还是非常常用的，例如不小心挪动了某个组件，或者不小心删除了组件，都可以进行撤销</p><p>详情实现请看文章： <a href="https://juejin.im/post/5e396339e51d4526e03f8ee90" target="_blank" rel="noopener">基于vuex实现 撤销 与 反撤销 的plugins</a></p><p>此处特别鸣谢 鲁班h5 感觉大佬提供试思路</p><h4 id="客户端响应式实现"><a href="#客户端响应式实现" class="headerlink" title="客户端响应式实现"></a>客户端响应式实现</h4><p>移动端响应式一直是一个很大的问题，也是前期这个项目最头疼的点，目前的解决办法是统一按照375的宽度来进行使用，移动端vw设置默认计算宽度为375，这样，后台生成的px为单位的css，在前台都会按照一定比例被转成响应式的vw单位，这样即可适配移动端屏幕，经过测试，这种方案还是表现良好的</p><h4 id="他能做什么？"><a href="#他能做什么？" class="headerlink" title="他能做什么？"></a>他能做什么？</h4><p>能解决痛点，项目才有价值</p><p>以我们公司去年的某个业务为例，一个活动预约页面</p><p><a href="http://www.vkcyan.top/lrRgNYOdKl_ICPApudSKV-cxTdIs.mp4" target="_blank" rel="noopener">查看演示</a></p><p>在完全无代码的情况下我们完成编码需求，没有编写代码加后期反复修改的时间，无疑给前端节约了大量地工作时间，也提高了部门之间的工作效率</p><p>他还能做些什么，前面也提到了动画模块，所以是可以进行类似宣传页面的实现的</p><p><a href="http://www.vkcyan.top/lhQFISABn16i3B4XdNUXH92NFFOb.mp4" target="_blank" rel="noopener">查看演示</a></p><p>目前系统还不支持多页滑动的情况，不过后期都会加的，这个系统初衷就是完成营销页面，解放部分前端开发者的工作量，后期越写越感觉或许这个项目还可以有进步空间，将来可以做成易企秀这样的产品，同时支持第三方接入，更加适合企业私有化部署，以及接入</p><h3 id="基于业务组件实现拖拽如何实现？"><a href="#基于业务组件实现拖拽如何实现？" class="headerlink" title="基于业务组件实现拖拽如何实现？"></a>基于业务组件实现拖拽如何实现？</h3><p>基本思路与基于基础组件的思路是一样的，但是需要在后台与客户端写两套代码，然后提取共有的部分，进行配置</p><p><img src="http://www.vkcyan.top/Fl5emf_cjeUqEtAEzVnoUOLJuSpW.png" alt=""></p><p>思路是差不多的，例如商品组件，总体布局是固定的，所以这部分前后端写死，唯一变化的是里面的数据，那么我们只需要配置变化部分就好，基于这样的思路，我们只需要定义好业务组件的数据结构，那么后面就都是工作量的问题了，相对来说基于业务的组件比基于基础组件的实现更加简单，只需要填充数据到业务组件里面去可以实现了</p><p><a href="http://www.vkcyan.top/Fr9t3nMTi5_wffxO9Pj063bhvbH7.mp4" target="_blank" rel="noopener">查看演示</a></p><p>基于这种实现，前端开发就有了给用户调整的能力了，内边距不够？配置一下padding，你要多大自己调~~</p><p><img src="http://www.vkcyan.top/Foc9OtviOYKLKo3u0CsS7mGNClGl.gif" alt=""></p><p>本文就到到这里啦，如需交流请加交流群</p><p><img src="https://camo.githubusercontent.com/b170b1c064ef297425d1694a571424ab3376625e/687474703a2f2f7777772e766b6379616e2e746f702f466f4346562d4544644c5a4b5066674543354f56764e482d5f3948642e6a7067" alt=""></p><p>或者添加作者微信： w2467230789</p><p>都看到这里了，start一下吧</p><p><a href="http://121.36.37.117/docs/home" target="_blank" rel="noopener">易动</a> </p><ul><li><a href="https://github.com/vkcyan/activity_generate" target="_blank" rel="noopener">activity_generate</a> 后台</li><li><a href="https://github.com/vkcyan/activity_mobile" target="_blank" rel="noopener">activity_mobile</a> 客户端</li><li><a href="https://github.com/vkcyan/activity_server" target="_blank" rel="noopener">activity_server</a> 后端</li></ul><p>目前大三求大厂内推~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端如何实现h5页面搭建&quot;&gt;&lt;a href=&quot;#前端如何实现h5页面搭建&quot; class=&quot;headerlink&quot; title=&quot;前端如何实现h5页面搭建&quot;&gt;&lt;/a&gt;前端如何实现h5页面搭建&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前端工程师是有极限的&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>写给自己</title>
    <link href="http://yoursite.com/2020/04/19/2020%E5%B9%B44%E6%9C%8819%E5%8F%B7%20%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1/"/>
    <id>http://yoursite.com/2020/04/19/2020年4月19号 写给自己/</id>
    <published>2020-04-18T16:00:00.000Z</published>
    <updated>2020-04-19T14:55:57.119Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.vkcyan.top/ltFZR8bv7-A1iALmzuhHC4xSHHsw.png" alt="">    </p><p>​    转眼间，已经2020年了，时间都像呼啸的列车一般快速的推进，很多感觉遥不可及的事情也都逐渐变的清晰，虽然生活仍然会觉得起伏不定，但是对自己的认知似乎不断的清晰，我时常会问自己，你想要的追求的是什么</p><p>​        今年是我专升本大三，在这个关键的时候，想跳到更大的圈子里面，投过京东的校招，也给阿里的某个部门看过简历，得到的结果都是，，您的学历不行，非常抱歉，期初我对校招还存在些许期待，但是后面接二连三的事情，让我逐渐认清了现实，逐渐的去明白这个社会，学习真的是最好的途径，后面我也放弃了校招，后面小米的部门看到我的github后还联系过我，不过我发过简历后就没声音了。。。。专升本终究是专升本，对于门槛的提升，很有限了</p><p>​        有时候把，感觉程序员是一个奇怪的行业，是一个内卷严重，或者说，最热爱学习的行业了，周日晚上打开掘金的沸点，看到一个沸点问，大家周末都干嘛，下面评论大部分都是 加班 学习 上网  运动，，，总感觉程序员的时间总是比较独立，或许评论只能反映一部分，就我个人而言，程序员的生活也确实就是这样的，对够感情的需求特别小，总是不断的学习学习，向更高的地方爬，解决工作上的bug，真的是一个很残酷的行业，生活与学习，我总是无法均衡，最起码在这个年纪。</p><p>​        最近和同事之间不太愉快，总是不断的被指责，言语间都是对前端的蔑视，前端在小公司的地位可见一斑，身边环境越是恶劣越是激发我努力的心，作为一名技术，需要明确自己的责任，也要在业务上多发声，过于佛系，或许只会惹祸上身</p><p>今天就不写了，女朋友要陪，男人的压力真的很大，工作和感情都要兼顾，如果这个男人是程序员，那压力或许会更大</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://www.vkcyan.top/ltFZR8bv7-A1iALmzuhHC4xSHHsw.png&quot; alt=&quot;&quot;&gt;    &lt;/p&gt;
&lt;p&gt;​    转眼间，已经2020年了，时间都像呼啸的列车一般快速的推进，很多感觉遥不可及的事情也都逐渐变的
      
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="\- 日常" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>2020年第一篇软文</title>
    <link href="http://yoursite.com/2020/02/03/2020%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E8%BD%AF%E6%96%87/"/>
    <id>http://yoursite.com/2020/02/03/2020年的第一篇软文/</id>
    <published>2020-02-02T16:00:00.000Z</published>
    <updated>2020-04-19T11:50:31.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020年第一篇软文"><a href="#2020年第一篇软文" class="headerlink" title="2020年第一篇软文"></a>2020年第一篇软文</h1><p>​            大家好，这里是vkcyan的研究院，转眼到了小时候感觉遥不可及的2020年，不知道此刻的你在做些什么？是在享受假期，还是在回家的归程；是不是离自己的梦想更近了一步呢</p><pre><code>对于前端开发者而言，2019年是惊喜的一年</code></pre><ul><li>实用关键词hook vue3 </li><li>云上关键词 WebAssembly ,微服务</li></ul><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>​        首先TS将更加收前端开发者青睐，2019年推荐你学TS，2020年，我依旧很推荐；</p><p>​        要说2019年前端开发最热门的话题，大概就是react hook吧，hook的思想又促进了一些新的第三方库产出，这种副作用思想是2019年的前端技术的风向标</p><p>​        还要提一个新东西，那就是flutter，flutter的出现，开始真真正正的让人感觉到大前端时代的到来，大厂的技术实践，Google的开源，都让人们更加看好flutter的未来,2020年就是检验flutter的时间</p><p>​        接下来，我想好好谈谈vue，2019年我相信很多vue开发者最关心的话题，随着vue-next的发布，在前端社区里面掀起了一阵前瞻介绍，源码解析的文章，相对于react来说，vue在国内还是更加有优势，vue简单的语法，便捷的指令备受青睐，我个人作为vue/react的开发者，我的感觉是5人以下前端小组更加适合使用vue，10人以上项目更加适合用react，因为vue2.x版本对ts实在是不够友好，不是ts的项目容易出现项目代码混乱，所以对于多人开发我更加青睐react，目前来看的话，vue依旧是种花家前端的热门，学vue，不会有错的</p><p>​        2019年公司做了跨端应用,起初用的是taro,开始阶段页面还是有点小问题的,小程序还好,h5总是出现各种各样的问题,什么复制api不能用的,页面没有100%高度,打包上线,容易出现白屏现象,这类问题难以解决,并且是taro框架本身的,最让不得不承认taro社区建设的很好,但是产品还是问题太多了,最后整个项目用uniapp+ts重写的,目前来看,不会出现白屏现象,缓存也不严重,社区有很多别人写的兼容包,编译的速度也很快,总体来时体验感比taro要好很多,虽然uniapp也有点小问题,但是经历过taro之后,我们感觉uniapp还是达到成品要求了</p><p>​        至于其他的,例如 WebAssembly  微前端 还是没有大规模使用,这些都处于观望状态</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>​        2019年是很曲折的一年,因为专升本了,在公司与学校之间来回奔波,在这个社会上请人帮忙做点事真的很难</p><p>​        公司这边总体也算是稳定吧,算是撑起的公司的前端业务,从某种意义上来说似乎,我的人生是从19岁开始的,那时候开始接触代码,从c到java再到前端开发,沉迷于技术,我很喜欢我的行业,也算是得到老天的眷顾了,希望2020年可以继续保持初心,好好钻研前端技术,不要浮躁,然后校招进入大公司</p><p>2019在开源上得到了突破,项目得到了117个start,能够为社区做出自己的贡献的感觉真的很棒,在文章输出以及开源上面2020希望做的更好,体现自己的价值</p><p>今天也1月22日了,还是8分钟下班,外面天也黑透了,此刻心情很通明,回家过年了</p><p>年年有今日,岁岁有今朝</p><p>2020年要继续加油</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2020年第一篇软文&quot;&gt;&lt;a href=&quot;#2020年第一篇软文&quot; class=&quot;headerlink&quot; title=&quot;2020年第一篇软文&quot;&gt;&lt;/a&gt;2020年第一篇软文&lt;/h1&gt;&lt;p&gt;​            大家好，这里是vkcyan的研究院，转眼到了小时候
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/11/prototype.slice.call%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/09/11/prototype.slice.call的理解/</id>
    <published>2018-09-11T06:29:32.000Z</published>
    <updated>2018-09-11T06:29:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="slice-call的理解"><a href="#slice-call的理解" class="headerlink" title="[].slice.call的理解"></a>[].slice.call的理解</h1><p>这个方法见过很多遍一直不知道他做什么的,可以完成什么功能</p><h3 id="首先要说明-slice-call-与Array-prototype-slice-call-有什么区别"><a href="#首先要说明-slice-call-与Array-prototype-slice-call-有什么区别" class="headerlink" title="首先要说明[].slice.call()与Array.prototype.slice.call() 有什么区别?"></a>首先要说明<strong>[].slice.call()</strong>与<strong>Array.prototype.slice.call()</strong> 有什么区别?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[].slice === <span class="built_in">Array</span>.prototype.slice</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>[]为创建数组,当[].slice的时候,自然会去找原型链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[].__proto__.slice === <span class="built_in">Array</span>.prototype.slice</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><ol><li><p>Array.prototype.slice是定义的方法,可以被重写</p><p>[].silce是使用定义的方法</p></li><li><p>自身的属性不同(因为原型与[]的区别)</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(<span class="built_in">Array</span>.prototype)</span><br><span class="line">(<span class="number">37</span>) [<span class="string">"length"</span>, <span class="string">"constructor"</span>, <span class="string">"concat"</span>, <span class="string">"pop"</span>, <span class="string">"push"</span>, <span class="string">"shift"</span>, <span class="string">"unshift"</span>, <span class="string">"slice"</span>, <span class="string">"splice"</span>, <span class="string">"includes"</span>, <span class="string">"indexOf"</span>, <span class="string">"keys"</span>, <span class="string">"entries"</span>, <span class="string">"forEach"</span>, <span class="string">"filter"</span>, <span class="string">"map"</span>, <span class="string">"every"</span>, <span class="string">"some"</span>, <span class="string">"reduce"</span>, <span class="string">"reduceRight"</span>, <span class="string">"toString"</span>, <span class="string">"toLocaleString"</span>, <span class="string">"join"</span>, <span class="string">"reverse"</span>, <span class="string">"sort"</span>, <span class="string">"lastIndexOf"</span>, <span class="string">"copyWithin"</span>, <span class="string">"find"</span>, <span class="string">"findIndex"</span>, <span class="string">"fill"</span>, <span class="string">"remove"</span>, <span class="string">"removeFirstIf"</span>, <span class="string">"removeIf"</span>, <span class="string">"repeat"</span>, <span class="string">"last"</span>, <span class="string">"lastDef"</span>, <span class="string">"clone"</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames([])</span><br><span class="line">[<span class="string">"length"</span>]</span><br></pre></td></tr></table></figure><p>所以在本质上[]和Array.prototype没有本质区别,但是调用上是有区别的,但是根据专业检测,[]要更快一点</p><h3 id="在MDN上-slice的解释是"><a href="#在MDN上-slice的解释是" class="headerlink" title="在MDN上 slice的解释是"></a>在MDN上 slice的解释是</h3><p><strong>slice()</strong>方法返回一个从开始到结束(<strong>不包括结束</strong>)选择的数组的一部分进行<strong>浅拷贝</strong>到一个新的数组对象,并且原对象不会被修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = [<span class="string">'ant'</span>, <span class="string">'bison'</span>, <span class="string">'camel'</span>, <span class="string">'duck'</span>, <span class="string">'elephant'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["camel", "duck", "elephant"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["camel", "duck"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["bison", "camel", "duck", "elephant"]</span></span><br></pre></td></tr></table></figure><p>参数有两个slice(begin,end)</p><h4 id="begin"><a href="#begin" class="headerlink" title="begin :"></a>begin :</h4><ul><li>如果没有参数那就从0开始</li><li>有就从索引处来时(第一位为0)</li><li>如果该参数为负数，<code>则表示从原数组中的倒数第几个元素开始提取，</code>slice(-2)表示提取原数组中的倒数第二个元素到最后一个元素 (包含最后一个元素)</li></ul><h4 id="end"><a href="#end" class="headerlink" title="end :"></a>end :</h4><ul><li>如果没有参数,默认取到数组末尾</li><li>如果大于数组长度,取到数组末尾</li><li><code>slice(1,4)</code> 提取原数组中的第二个元素开始直到第四个元素的所有元素 （索引为 1, 2, 3的元素)</li><li>如果该参数为负数， <code>则它表示在原数组中的倒数第几个元素结束抽取</code>。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line">a.slice(<span class="number">3</span>,<span class="number">-2</span>)</span><br><span class="line">(<span class="number">3</span>) [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>一个含有提取元素的新数组 </p><p><code>slice</code> 不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。 </p><ul><li><p>如果该元素是个对象引用 （不是实际的对象），<code>slice</code> 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。</p></li><li><p>对于字符串、数字及布尔值来说（不是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener"><code>String</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="noopener"><code>Number</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Boolean" target="_blank" rel="noopener"><code>Boolean</code></a> 对象），<code>slice</code> 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。</p></li></ul><p>如果向两个数组任一中添加了新元素，则另一个不会受到影响。 </p><p>以上大致是MDN上面对slice的专业解释</p><p><code>slice</code> 这个方法在不接受任何参数的时候会返回 <code>this</code> 本身</p><p><code>arguments</code> 是属于函数内部的变量，其值是函数参数列表，一个类数组对象,是具有长度属性的,却并不是数组,不具备slice()这个方法,那就意味着 <code>arguments.slice()</code>行不通</p><p>这里可以改变this的call出现了,假如我用call将arguments把this给slice会发生什么?</p><p>slice会得到具有长度属性的对象,就实现了对象转数组的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(list(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>一定有人会问,为什么将arguments的call给slice就可以变成数组?内部到底发生了什么</p><p>我们可以实现一个自己的slice(),就明白了</p><h2 id="Myslice"><a href="#Myslice" class="headerlink" title="Myslice()"></a>Myslice()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.Myslice = <span class="function"><span class="keyword">function</span> (<span class="params">begin,end</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> start = begin || <span class="number">0</span>;   <span class="comment">//判断begin时候存在 不存在给0 这里判断可以加强</span></span><br><span class="line">  <span class="keyword">var</span> len = <span class="keyword">this</span>;    <span class="comment">//获取this.length  这里得到了call进来的对象</span></span><br><span class="line">  </span><br><span class="line">  start = (start &gt;= <span class="number">0</span>) ? start : <span class="built_in">Math</span>.max(<span class="number">0</span>, len + start); <span class="comment">//判断参数是不是是不是大于1,负数情况下的begin取值</span></span><br><span class="line">  end = (<span class="keyword">typeof</span> end == <span class="string">'number'</span>) ? <span class="built_in">Math</span>.min(end, len) : len;  <span class="comment">//判断end是不是大于this.length的长度</span></span><br><span class="line">  <span class="keyword">if</span>(end&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    end = end + len  <span class="comment">//判断负值的情况</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; end.length; i++) &#123;</span><br><span class="line">    result.push(<span class="keyword">this</span>[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.Myslice.call(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(list(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>相信看到这里就明白为什么Array.prototype.slice.call 是如何将对象变成数组的~~~</p><p>最后贴上JavaScript sclie的源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice = <span class="function"><span class="keyword">function</span>(<span class="params">begin, end</span>) </span>&#123;</span><br><span class="line">  end = <span class="keyword">typeof</span> end !== <span class="string">'undefined'</span> ? end : <span class="keyword">this</span>.length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>) === <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _slice.call(<span class="keyword">this</span>, begin, end)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i,</span><br><span class="line">    cloned = [],</span><br><span class="line">    size,</span><br><span class="line">    len = <span class="keyword">this</span>.length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> start = begin || <span class="number">0</span></span><br><span class="line">  start = start &gt;= <span class="number">0</span> ? start : <span class="built_in">Math</span>.max(<span class="number">0</span>, len + start)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> upTo = <span class="keyword">typeof</span> end == <span class="string">'number'</span> ? <span class="built_in">Math</span>.min(end, len) : len</span><br><span class="line">  <span class="keyword">if</span> (end &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    upTo = len + end</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  size = upTo - start</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    cloned = <span class="keyword">new</span> <span class="built_in">Array</span>(size)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.charAt) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        cloned[i] = <span class="keyword">this</span>.charAt(start + i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        cloned[i] = <span class="keyword">this</span>[start + i]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cloned</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(list(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>文章为个人总结,若有错误,请指出</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;slice-call的理解&quot;&gt;&lt;a href=&quot;#slice-call的理解&quot; class=&quot;headerlink&quot; title=&quot;[].slice.call的理解&quot;&gt;&lt;/a&gt;[].slice.call的理解&lt;/h1&gt;&lt;p&gt;这个方法见过很多遍一直不知道他做什么的,
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js中的事件冒泡以及捕获，监听，绑定，委托</title>
    <link href="http://yoursite.com/2018/09/11/%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%8D%95%E8%8E%B7%20%E5%86%92%E6%B3%A1%20%E5%A7%94%E6%89%98/"/>
    <id>http://yoursite.com/2018/09/11/事件的捕获 冒泡 委托/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2018-09-13T01:32:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js中的事件冒泡以及捕获，监听，绑定，委托"><a href="#js中的事件冒泡以及捕获，监听，绑定，委托" class="headerlink" title="js中的事件冒泡以及捕获，监听，绑定，委托"></a>js中的事件冒泡以及捕获，监听，绑定，委托</h1><p>最先发现这个问题是在MVVM的实现里面，给v-model绑定input事件的时候，使用可能addEventListener </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(event， function， useCapture)</span><br></pre></td></tr></table></figure><p>第三个参数默认值是true，表示在<strong>事件捕获阶段</strong>调用处理函数</p><p>如果参数为false，表示在<strong>事件冒泡阶段</strong>调用事件处理函数</p><p>这啥意思?</p><p>事件冒泡与事件捕获封分别有微软与网景提出，就是为了解决页面中的事件执行顺序问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt; </span><br><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">&lt;div class=&quot;child&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>如果是事件捕获: body &gt; parent &gt; child (从外到内)</p><p>事件从根节点开始，逐级派送到子节点，若节点绑定了事件动作，则执行动作，然后继续走，这个阶段称为“捕获阶段(Capture)”; </p><p>如果是时间冒泡: child &gt; parent &gt; body (从内到外)</p><p>执行完捕获阶段后，事件由子节点往根节点派送，若节点绑定了事件动作，则执行动作，然后继续走，这个阶段称为“冒泡阶段(Bubble)”。</p><p>后来(w3c)组织，指定了折中的规则，<strong>先捕获再冒泡</strong></p><p>也就是我前面很疑惑的第三个参数，就是规定绑定事件在捕获阶段还是在冒泡阶段执行</p><p>我记得我看到过一张图，也就是事件冒泡以及捕获</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FvhaVQ4Glu5UdC3zT_qnMt96pGAY.png" alt=""></p><h2 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>js事件机制<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"s1"</span> <span class="attr">style</span>=<span class="string">"background-color: antiquewhite"</span> &gt;</span>parent</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"s2"</span> <span class="attr">style</span>=<span class="string">"background-color: burlywood"</span>&gt;</span>child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    s1.addEventListener(<span class="string">"click"</span>， <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"parent 捕获事件"</span>);</span></span><br><span class="line"><span class="javascript">      &#125;， <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    s2.addEventListener(<span class="string">"click"</span>， <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"child 捕获事件"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;， <span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们点击子节点， 也就是child的时候 顺序如下</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FpXkyhQfpXuDTYV2sQ964coOwDjT.png" alt=""> </p><p>先执行了父元素的绑定事件，在执行内部的绑定事件</p><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>js事件机制<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"s1"</span> <span class="attr">style</span>=<span class="string">"background-color: antiquewhite"</span> &gt;</span>parent</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"s2"</span> <span class="attr">style</span>=<span class="string">"background-color: burlywood"</span>&gt;</span>child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    s1.addEventListener(<span class="string">"click"</span>， <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"parent 冒泡事件"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;， <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">    s2.addEventListener(<span class="string">"click"</span>， <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"child 冒泡事件"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;， <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://on7r0tqgu.bkt.clouddn.com/FvlwuK765a-YQeKqQfEM7XJjyNtG.png" alt=""></p><p>这里的执行效果与捕获事件恰恰相反，先执行了子元素的绑定事件 在去执行父元素的绑定事件</p><h2 id="冒泡-捕获"><a href="#冒泡-捕获" class="headerlink" title="冒泡+捕获"></a>冒泡+捕获</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>js事件机制<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"s1"</span> <span class="attr">style</span>=<span class="string">"background-color: antiquewhite"</span>&gt;</span>parent</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"s2"</span> <span class="attr">style</span>=<span class="string">"background-color: burlywood"</span>&gt;</span>child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    s1.addEventListener(<span class="string">"click"</span>， <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"parent 冒泡事件"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;， <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    s2.addEventListener(<span class="string">"click"</span>， <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"child 冒泡事件"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;， <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    s1.addEventListener(<span class="string">"click"</span>， <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"parent 捕获事件"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;， <span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    s2.addEventListener(<span class="string">"click"</span>， <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"child 捕获事件"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;， <span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fh8UN3dffh3qwO-REG8UEODQ15ax.png" alt=""></p><p>就像图示一样，从最上层到捕获到点击的绑定事件 在往上冒泡，执行冒泡阶段的事件</p><h2 id="对事件的控制-停止冒泡"><a href="#对事件的控制-停止冒泡" class="headerlink" title="对事件的控制,停止冒泡"></a>对事件的控制,停止冒泡</h2><p>当我们点击子元素，事件冒泡，但是不希望触发父元素的事件应该怎么做</p><p>解决办法: 停止事件的传播 event.stopPropagation()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s2.addEventListener(&quot;click&quot;， function (e) &#123;</span><br><span class="line">     console.log(&quot;child 冒泡事件&quot;);</span><br><span class="line">     e.stopPropagation()</span><br><span class="line">     //console.log(&apos;停止冒泡&apos;);</span><br><span class="line">     </span><br><span class="line">   &#125;， false);</span><br></pre></td></tr></table></figure><p><img src="http://on7r0tqgu.bkt.clouddn.com/FvEmHBNT6tFjSqtbxCRlPoGWIkPL.png" alt=""></p><p>在点击子元素的时候就只弹出了子元素那条信息，父元素的事件没有触发，因为事件已经停止传播了，冒泡阶段也就停止了。 </p><p>这让我想到了之前的一道面试题</p><p>ul下未知多少个li， 但是要求 点击某个li就返回某个li里面的文本信息</p><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>时间监听分为三个阶段,也就是前端说的 捕获阶段 目标阶段 冒泡阶段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(event, function, useCapture)</span><br></pre></td></tr></table></figure><p>event : （必需）事件名，支持所有<a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.runoob.com%2Fjsref%2Fdom-obj-event.html" target="_blank" rel="noopener">DOM事件</a>。 function：（必需）指定要事件触发时执行的函数。 useCapture：（可选）指定事件是否在捕获或冒泡阶段执行。true，捕获。false，冒泡。默认false。 </p><p>事件监听是可以移除的,这是也是优于事件绑定的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.removeEventListener(event,function);</span><br></pre></td></tr></table></figure><p>例子: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;html lang=<span class="string">"zh-cn"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;js事件机制&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;ul id=<span class="string">"color-list"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">5</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;6&lt;/</span>li&gt;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    (function () &#123;</span></span><br><span class="line"><span class="regexp">      var color_list = document.getElementById('color-list')</span></span><br><span class="line"><span class="regexp">      var colors = color_list.getElementsByTagName('li')</span></span><br><span class="line"><span class="regexp">      for (var i = 0; i &lt; colors.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">        colors[i].addEventListener('click'， showLi， false)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      function showLi(e) &#123;</span></span><br><span class="line"><span class="regexp">        var x = e.target;</span></span><br><span class="line"><span class="regexp">        console.log(x.innerHTML);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)()</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>这里给每一个li都添加了绑定事件，假如很多很多势必会影响其性能，所以我们可以绑定到父节点上面</p><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><blockquote><p>事件委托就是利用冒泡的原理，把事件加到父元素或祖先元素上，触发执行效果。  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> color_list = <span class="built_in">document</span>.getElementById(<span class="string">'color-list'</span>);</span><br><span class="line">      color_list.addEventListener(<span class="string">'click'</span>， show， <span class="literal">false</span>); <span class="comment">// 点击子节点 向上冒泡 执行show</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x = e.target;</span><br><span class="line">        <span class="keyword">if</span> (x.localName === <span class="string">'li'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(x.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure><p>写入事件监听 事件委托 顺便就将事件绑定也说一下</p><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul><li>在DOM元素中直接绑定； &gt;&gt; 在dom上面绑定 onclick onmouseover 事件</li><li>在JavaScript代码中绑定； &gt;&gt; 获取 dom节点 .click() </li><li>绑定事件监听函数。&gt;&gt; addEventListener</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js中的事件冒泡以及捕获，监听，绑定，委托&quot;&gt;&lt;a href=&quot;#js中的事件冒泡以及捕获，监听，绑定，委托&quot; class=&quot;headerlink&quot; title=&quot;js中的事件冒泡以及捕获，监听，绑定，委托&quot;&gt;&lt;/a&gt;js中的事件冒泡以及捕获，监听，绑定，委托&lt;/
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/05/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAMVVM%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2018/09/05/实现一个MVVM框架/</id>
    <published>2018-09-05T01:47:45.000Z</published>
    <updated>2018-09-05T01:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: 实现一个MVVM框架</span><br><span class="line">date: 2018-9-1</span><br><span class="line">tags: </span><br><span class="line">- Vue</span><br><span class="line">  - JavaScript</span><br><span class="line">categories: Vue</span><br></pre></td></tr></table></figure><h1 id="实现一个MVVM框架"><a href="#实现一个MVVM框架" class="headerlink" title="实现一个MVVM框架"></a>实现一个MVVM框架</h1><p>假如想掌握一个技能,个人感觉有两种途径可以实现 要么熟能生巧,要么了解原理,即使是新手程序员写10万行代码,不懂也懂了</p><p>实现双向绑定,从根本上来说,无非就是在单向绑定的基础上面在给可以输入的元素添加时间来动态修改model和view<br>实现双向绑定的几种做法</p><ul><li>vue 数据劫持</li><li>ng 脏值检查</li><li>订阅 - 发布</li></ul><p>关于后两者,我都不太懂,贴出网络大佬的解释</p><p><strong>发布者-订阅者模式:</strong> 一般通过sub, pub的方式实现数据和视图的绑定监听，更新数据方式通常做法是 <code>vm.set(&#39;property&#39;, value)</code>，这里有篇文章讲的比较详细，有兴趣可点<a href="http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day" target="_blank" rel="noopener">这里</a></p><p>这种方式现在毕竟太low了，我们更希望通过 <code>vm.property = value</code>这种方式更新数据，同时自动更新视图，于是有了下面两种方式</p><p><strong>脏值检查:</strong> angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：</p><ul><li>DOM事件，譬如用户输入文本，点击按钮等。( ng-click )</li><li>XHR响应事件 ( $http )</li><li>浏览器Location变更事件 ( $location )</li><li>Timer事件( $timeout , $interval )</li><li>执行 $digest() 或 $apply()</li></ul><p><strong>数据劫持:</strong> vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p>这里实现es6简单版本的mvvm框架,用的是vue的数据劫持的实现方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MVVM</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      el,</span><br><span class="line">      data,</span><br><span class="line">      methods</span><br><span class="line">    &#125; = options</span><br><span class="line">    <span class="keyword">this</span>.methods = methods</span><br><span class="line">    <span class="keyword">this</span>.target = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.observer(<span class="keyword">this</span>, data)</span><br><span class="line">    <span class="keyword">this</span>.instruction(<span class="built_in">document</span>.getElementById(el)) <span class="comment">// 获取挂载点</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据监听器 拦截所有data数据 传给defineProperty用于数据劫持</span></span><br><span class="line">  observer(root, data) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="keyword">this</span>.definition(root, key, data[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将拦截的数据绑定到this上面</span></span><br><span class="line">  definition(root, key, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123; <span class="comment">// 假如value是对象则接着递归</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.observer(value, value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dispatcher = <span class="keyword">new</span> Dispatcher() <span class="comment">// 调度员</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(root, key, &#123;</span><br><span class="line">      set(newValue) &#123;</span><br><span class="line">        value = newValue</span><br><span class="line">        dispatcher.notify(newValue)</span><br><span class="line">      &#125;,</span><br><span class="line">      get() &#123;</span><br><span class="line">        dispatcher.add(<span class="keyword">this</span>.target)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//指令解析器</span></span><br><span class="line">  instruction(dom) &#123;</span><br><span class="line">    <span class="keyword">const</span> nodes = dom.childNodes; <span class="comment">// 返回节点的子节点集合</span></span><br><span class="line">    <span class="comment">// console.log(nodes); //查看节点属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> nodes) &#123; <span class="comment">// 与for in相反 for of 获取迭代的value值</span></span><br><span class="line">      <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>) &#123; <span class="comment">// 元素节点返回1</span></span><br><span class="line">        <span class="keyword">const</span> attrs = node.attributes <span class="comment">//获取属性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">of</span> attrs) &#123;</span><br><span class="line">          <span class="keyword">if</span> (attr.name === <span class="string">'v-model'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> value = attr.value <span class="comment">//获取v-model的值</span></span><br><span class="line"></span><br><span class="line">            node.addEventListener(<span class="string">'input'</span>, e =&gt; &#123; <span class="comment">// 键盘事件触发</span></span><br><span class="line">              <span class="keyword">this</span>[value] = e.target.value</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">this</span>.target = <span class="keyword">new</span> Watcher(node, <span class="string">'input'</span>) <span class="comment">// 储存到订阅者</span></span><br><span class="line">            <span class="keyword">this</span>[value] <span class="comment">// get一下,将 this.target 给调度员</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (attr.name == <span class="string">"@click"</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> value = attr.value <span class="comment">// 获取点击事件名</span></span><br><span class="line">            </span><br><span class="line">            node.addEventListener(<span class="string">'click'</span>,</span><br><span class="line">              <span class="keyword">this</span>.methods[value].bind(<span class="keyword">this</span>)</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.nodeType === <span class="number">3</span>) &#123; <span class="comment">// 文本节点返回3</span></span><br><span class="line">        <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>; <span class="comment">//匹配 &#123;&#123;  &#125;&#125;</span></span><br><span class="line">        <span class="keyword">let</span> match = node.nodeValue.match(reg)</span><br><span class="line">        <span class="keyword">if</span> (match) &#123; <span class="comment">// 匹配都就获取&#123;&#123;&#125;&#125;里面的变量</span></span><br><span class="line">          <span class="keyword">const</span> value = match[<span class="number">1</span>].trim()</span><br><span class="line">          <span class="keyword">this</span>.target = <span class="keyword">new</span> Watcher(node, <span class="string">'text'</span>)</span><br><span class="line">          <span class="keyword">this</span>[value] = <span class="keyword">this</span>[value] <span class="comment">// get set更新一下数据</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调度员 &gt; 调度订阅发布</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.watchers = []</span><br><span class="line">  &#125;</span><br><span class="line">  add(watcher) &#123;</span><br><span class="line">    <span class="keyword">this</span>.watchers.push(watcher) <span class="comment">// 将指令解析器解析的数据节点的订阅者存储进来,便于订阅</span></span><br><span class="line">  &#125;</span><br><span class="line">  notify(newValue) &#123;</span><br><span class="line">    <span class="keyword">this</span>.watchers.map(<span class="function"><span class="params">watcher</span> =&gt;</span> watcher.update(newValue))</span><br><span class="line">    <span class="comment">// 有数据发生,也就是触发set事件,notify事件就会将新的data交给订阅者,订阅者负责更新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//订阅发布者 MVVM核心</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(node, type) &#123;</span><br><span class="line">    <span class="keyword">this</span>.node = node</span><br><span class="line">    <span class="keyword">this</span>.type = type</span><br><span class="line">  &#125;</span><br><span class="line">  update(value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'input'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.node.value = value <span class="comment">// 更新的数据通过订阅者发布到dom</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.type === <span class="string">'text'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.node.nodeValue = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;MVVM&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"text"</span>&gt;&#123;&#123; text &#125;&#125;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"update"</span>&gt;重置&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=<span class="string">"./index.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> mvvm = <span class="keyword">new</span> MVVM(&#123;</span><br><span class="line">      el: <span class="string">'app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        text: <span class="string">'hello MVVM'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        update() &#123;</span><br><span class="line">          <span class="keyword">this</span>.text = <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack4+Vue搭建自己的Vue-cli</title>
    <link href="http://yoursite.com/2018/08/28/vue-MYCLI/"/>
    <id>http://yoursite.com/2018/08/28/vue-MYCLI/</id>
    <published>2018-08-27T16:00:00.000Z</published>
    <updated>2018-09-05T01:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack4-Vue搭建自己的Vue-cli"><a href="#webpack4-Vue搭建自己的Vue-cli" class="headerlink" title="webpack4+Vue搭建自己的Vue-cli"></a>webpack4+Vue搭建自己的Vue-cli</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在看webpack4，深感知识浅薄，这两天也一直在思考cli的配置，借助一些别人的实践，尝试自己搭建vue的项目，这里使用webpack4版本，之前我在网上查找别人的vue项目搭建,但是都是webpack3的,所以写了本文，如果有错误,或者有什么问题,请大佬们指出</p><p>关于webpack的本文不会多说，请看<a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noopener">webpack文档</a></p><p>关于本文的github地址<a href="https://github.com/vkcyan/vue-MYCLI" target="_blank" rel="noopener">vue-MYCLI</a></p><h3 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h3><p>​    完成了基本的js vue css 的配置 <a href="https://github.com/vkcyan/vue-MYCLI/tree/master" target="_blank" rel="noopener">基础版本</a></p><h3 id="完整版本"><a href="#完整版本" class="headerlink" title="完整版本"></a>完整版本</h3><p>​    安装了<strong>vue-router vuex less eslint</strong>,webpack配置已经调整完毕,基本可以使用 <a href="https://github.com/vkcyan/vue-MYCLI/tree/comprehensive" target="_blank" rel="noopener">完整版本</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>熟悉 webpack4</li><li>熟悉 vue</li></ul><h2 id="搭建基本骨架"><a href="#搭建基本骨架" class="headerlink" title="搭建基本骨架"></a>搭建基本骨架</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>安装webpack4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli  --save-dev</span><br></pre></td></tr></table></figure><p>在开始之前先实验一下环境</p><p>根目录新建文件 index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width， initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./src/mian.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根目录新建文件 src/main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是main"</span>);</span><br></pre></td></tr></table></figure><p>根目录新建文件webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, dist),</span><br><span class="line">    filename: <span class="string">'index.js'</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包js文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure><p>会看到一些报错,只要构建成功就ok</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FvWzvWyldX59S6xcQ5_h91n5guHd.png" alt=""></p><p>这里说明环境是没有问题的</p><h2 id="配置初始生成环境"><a href="#配置初始生成环境" class="headerlink" title="配置初始生成环境"></a>配置初始生成环境</h2><p>开始安装vue-loader吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack vue vue-loader -D  //-D就是--save-dev</span><br></pre></td></tr></table></figure><p>安装完成后看输出</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fq03-XQUwQ933PjfJxmK4BafD9Ws.png" alt=""></p><p>提示安装的依赖要安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack css-loader -D</span><br></pre></td></tr></table></figure><p>安装完毕后新建src/app.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    你好 &#123;&#123; data &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        data: &quot;Vue&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>.vue文件是无法直接运行的,需要在webpack里面配置loader</p><p>这里参照某课的老师的方法,html用webpack生成(后面说明)</p><p>在根目录新建index.js  删除index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Vue from 'vue'</span><br><span class="line">import App from './app.vue'</span><br><span class="line"></span><br><span class="line">const root = document.createElement('div')</span><br><span class="line">document.body.appendChild(root)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: (h) =&gt; h(App)</span><br><span class="line">&#125;).$mount(root)</span><br></pre></td></tr></table></figure><p>改写webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">'src/index.js'</span>), <span class="comment">//关于path模块可以看看阮一峰的教程  http://javascript.ruanyifeng.com/nodejs/path.html#toc0</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      loader: <span class="string">'vue-loader'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在package里面添加脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"build": "webpack --config webpack.config.js"</span><br></pre></td></tr></table></figure><p>控制台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>不出意外会报错</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FvezeUtSIaOGRZfK0-MO0BYYqztd.png" alt=""></p><p>这里有2个问题,一个是没有指定mode 一个是没有引用vue的插件</p><p>我们需要改写webpack.config.js,在config里面加一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode: &apos;production&apos;,   //暂时指定为生产环境</span><br></pre></td></tr></table></figure><p>再次运行<code>npm run build</code> 会报错,需要安装一个包</p><blockquote><p>这个报错,原本在vue-loader就有提示,不知道为什么现在没有,运行之前报错</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: [vue-loader] vue-template-compiler must be installed as a peer dependency, or a compatible compiler implementation must be passed via options</span><br></pre></td></tr></table></figure><p>安装vue-template-compiler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-template-compiler -D</span><br></pre></td></tr></table></figure><p>再再次运行<code>npm run build</code></p><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fh7aFnZ-q8ZMeBATz8fguDdIuYyg.png" alt=""></p><p>假如按步骤来不除意外这里可以打包成功了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">我们需要验证打包文件时候是否正确,所以这里使用插件[HtmlWebpackPlugin](https://webpack.docschina.org/plugins/html-webpack-plugin/),帮我们自动创建html文件,并且在后续的hash文件名上很有用,具体可以看官方介绍</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">npm install html-webpack-plugin -D</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">改webpack.config.js代码</span><br><span class="line"></span><br><span class="line">````JavaScript</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const &#123; VueLoaderPlugin &#125; = require(&apos;vue-loader&apos;)   </span><br><span class="line">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);   //引入插件</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &apos;production&apos;,   //暂时指定为生产环境</span><br><span class="line">  entry: path.resolve(__dirname, &apos;src/index.js&apos;), //关于path模块可以看看阮一峰的教程  http://javascript.ruanyifeng.com/nodejs/path.html#toc0</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;index.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: /\.vue$/,</span><br><span class="line">      loader: &apos;vue-loader&apos;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new VueLoaderPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">`npm run  build`打包一下,dist文件夹下面会有两个文件 </span><br><span class="line"></span><br><span class="line">![](http://on7r0tqgu.bkt.clouddn.com/Fn1OK7lN1Z1qOermZkVRWWLiwrt1.png )</span><br><span class="line"></span><br><span class="line">打包Vue程序完成</span><br></pre></td></tr></table></figure></p><p>至此完成了最基本的webpack配置</p><p>接下来我们要完成的的配置开发环境</p><h2 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h2><p>关于开发环境以及生成环境,webpack是需要区分的,根据文档<a href="https://webpack.docschina.org/concepts/mode" target="_blank" rel="noopener">模块</a>,我决定在命令里面指定模式,相应的就将开发环境以及生成环境分开,</p><p>这里我使用的是提起基本的webpack配置使用<code>webpack-merge</code>这个包来拼接我们webpack配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-merge -D</span><br></pre></td></tr></table></figure><p>修改配置文件</p><p>将各各环境的代码区分开,webpack的结构是这样的</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FiQ5N4R1WuxVe6qikN7CGBRlJKZB.png" alt=""></p><p>webpack.config.base.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config =  &#123;</span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">'../src/index.js'</span>), </span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      loader: <span class="string">'vue-loader'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure><p>webpack.config.build.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; VueLoaderPlugin &#125; = <span class="built_in">require</span>(<span class="string">'vue-loader'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.base'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = merge(baseConfig ,&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure><p>这里配置开发环境就是重头戏了,我们使用<a href="https://webpack.docschina.org/configuration/dev-server/" target="_blank" rel="noopener">webpack-dev-server</a></p><p>webpack-dev-server是一个小型的<code>Node.js Express</code>服务器,代码都跑在内存里面</p><p>安装webpack-dev-server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure><p>webpack.config.dev.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.base'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; VueLoaderPlugin &#125; = <span class="built_in">require</span>(<span class="string">'vue-loader'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = merge(baseConfig, &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="string">'8000'</span>,</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">//热加载</span></span><br><span class="line">    <span class="comment">//quiet: true //控制台中不输出打包的信息</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure><p>最后在package里面添加脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &quot;webpack --mode=production --config build/webpack.config.build.js&quot;,</span><br><span class="line">&quot;dev&quot;: &quot;webpack-dev-server --mode=development --progress --config build/webpack.config.dev.js&quot;</span><br></pre></td></tr></table></figure><p>执行<code>npm run dev</code>查看控制台</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fr1AoIzHGsIEtdgK1aOaD998W2gn.png" alt=""></p><p>这就成功了,在浏览器里面输入<a href="http://localhost:8000/" target="_blank" rel="noopener">http://localhost:8000/</a>,修改app.vue文件,实现了vue-cli的热加载了~~~~</p><p>接下来完善一下,不能只有.vue文件的loader,其他的webpack也要认识</p><p>我们配置一下图片的loader,以及css的loader,同时css使用postcss进行预处理</p><blockquote><p>url-loader 用于将文件转换为base64 URI     file-loader是依赖loader</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i url-loader file-loader -D</span><br></pre></td></tr></table></figure><p>添加配置webpack.config.base.js&gt;module&gt;rules</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.(gif|png|jpg|svg)$/</span>,</span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            limit: <span class="number">2048</span>,</span><br><span class="line">            name: <span class="string">'resources/[path][name].[hash:8].[ext]'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>配置css(vue-cli里面的实现非常友好,有机会可以去看看) 下面的是最简单的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader -D</span><br><span class="line">npm install vue-style-loader -D</span><br><span class="line">npm install postcss-loader -D</span><br></pre></td></tr></table></figure><p>添加配置webpack.config.base.js&gt;module&gt;rules   (postcss不了解谷歌一下)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'vue-style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span> <span class="comment">//启用源映射支持，postcss-loader将使用其他加载器给出的先前源映射并相应地更新它</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install autoprefixer -D</span><br></pre></td></tr></table></figure><p>根目录新建文件postcss.config.js,安装autoprefixer (自动添加浏览器前缀)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprofixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    autoprofixer()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置到这里基本的图片以及css就配置完成了,运行一下试试 <code>npm run dev</code></p><p>我找src下面创建了assets/img/user.jpg</p><p>app.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    你好 &#123;&#123; data &#125;&#125;</span><br><span class="line">    &lt;img src=<span class="string">"./assets/img/user.jpg"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        data: <span class="string">"Vue Cli"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">div&#123;</span></span><br><span class="line"><span class="regexp">  font-size: 20px;</span></span><br><span class="line"><span class="regexp">  color: red;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">img &#123;</span></span><br><span class="line"><span class="regexp">  width: 100px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p><img src="http://on7r0tqgu.bkt.clouddn.com/FjCnn8Jo1O0orp0SrLr-K6-WVETc.png" alt=""></p><p>实现了开发环境的图片以及css的配置</p><p>打包一下试试</p><p>build后生成的目录是这样的</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fl1RedxVti_IDXL0uxrHr5aXjJIo.png" alt=""></p><p>这不是我们想要的,webpack把代码,类库,css都打包在一起,这样不管是上线还是首屏加载都有影响,所以这里我们要优化webpack</p><p>在处理之前想安装一个可以帮助我们每次build之前自动删除上次build生成的文件的插件</p><p><code>clean-webpack-plugin</code>这个插件不知道为什么,怎么配置路径都没效果</p><p>这里我使用rimraf来进行删除(vue-cli也是使用rimraf,但是他是写在代码里面)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install rimraf -D</span><br></pre></td></tr></table></figure><p>在package里面变一下脚本,让打包之前帮我们删除之前到打包文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build-webpack"</span>: <span class="string">"webpack --mode=production --config build/webpack.config.build.js"</span>,</span><br><span class="line"><span class="string">"delete"</span>: <span class="string">"rimraf dist"</span>,</span><br><span class="line"><span class="string">"build"</span>: <span class="string">"npm run delete &amp;&amp; npm run build-webpack"</span></span><br></pre></td></tr></table></figure><h2 id="分离打包css"><a href="#分离打包css" class="headerlink" title="分离打包css"></a>分离打包css</h2><blockquote><p>它会将所有的入口 chunk(entry chunks)中引用的 <code>*.css</code>，移动到独立分离的 CSS 文件 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install extract-text-webpack-plugin@next -D</span><br></pre></td></tr></table></figure><p>因为开发环境和生产环境不一样</p><p>我们需要将css部分的代码分环境配置</p><ol><li>将原先的css配置放到webpack.config.dev.js里面</li><li>在webpack.config.build.js里面重写</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">        fallback: <span class="string">"vue-style-loader"</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>这样的话,我们开发环境不影响依旧是之前到模式,build的时候用ExtractTextPlugin帮我们分离非js文件,实现css的分离打包</p><p>我们打包一下试试<code>npm run build</code></p><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fj_GZsAlIwLICy19Yquq3EuAOYqu.png" alt=""></p><h2 id="分离js文件"><a href="#分离js文件" class="headerlink" title="分离js文件"></a>分离js文件</h2><p>接下来是分离js文件,就是将库文件以及我们的代码分离开,利于上线后的浏览器缓存,代码会经常变,库不会经常变</p><p>在webpack4之前js分离用的插件是CommonsChunkPlugin,不过这插件现在移除了,现在用的是optimization.splitChunks 来进行公共代码与第三方代码的提取,splitChunks参数如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123; </span><br><span class="line">      chunks: &quot;initial&quot;,         // 代码块类型 必须三选一： &quot;initial&quot;（初始化） | &quot;all&quot;(默认就是all) | &quot;async&quot;（动态加载） </span><br><span class="line">      minSize: 0,                // 最小尺寸，默认0</span><br><span class="line">      minChunks: 1,              // 最小 chunk ，默认1</span><br><span class="line">      maxAsyncRequests: 1,       // 最大异步请求数， 默认1</span><br><span class="line">      maxInitialRequests: 1,     // 最大初始化请求书，默认1</span><br><span class="line">      name: () =&gt; &#123;&#125;,            // 名称，此选项课接收 function</span><br><span class="line">      cacheGroups: &#123;                // 缓存组会继承splitChunks的配置，但是test、priorty和reuseExistingChunk只能用于配置缓存组。</span><br><span class="line">        priority: &quot;0&quot;,              // 缓存组优先级 false | object |</span><br><span class="line">        vendor: &#123;                   // key 为entry中定义的 入口名称</span><br><span class="line">          chunks: &quot;initial&quot;,        // 必须三选一： &quot;initial&quot;(初始化) | &quot;all&quot; | &quot;async&quot;(默认就是异步)</span><br><span class="line">          test: /react|lodash/,     // 正则规则验证，如果符合就提取 chunk</span><br><span class="line">          name: &quot;vendor&quot;,           // 要缓存的 分隔出来的 chunk 名称</span><br><span class="line">          minSize: 0,</span><br><span class="line">          minChunks: 1,</span><br><span class="line">          enforce: true,</span><br><span class="line">          reuseExistingChunk: true   // 可设置是否重用已用chunk 不再创建新的chunk</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>官方包括这解释,我并不是很看懂,所以打包策略并不是很好</p><p>在webpack.config.build.js&gt;config</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash:8].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">"all"</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          test: <span class="regexp">/node_modules/</span>,  <span class="comment">//这里虽然分离了,但是没有做到按需引入,看官方配置也不是很明白</span></span><br><span class="line">          name: <span class="string">'vendors'</span>,</span><br><span class="line">          chunks: <span class="string">'all'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    runtimeChunk: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>build一下查看目录,可以看出代码与库之间分离了</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fk0Cs9a1ih6CSaZLhgP80MTO0hWc.png" alt=""></p><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>这里处理一下git 新建文件.gitignore</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules/</span><br><span class="line">/dist/</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br></pre></td></tr></table></figure><h2 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig,"></a>.editorconfig,</h2><p>处理一下编译器的统一配置</p><p>新建文件 .editorconfig,(关于<a href="http://www.alloyteam.com/2014/12/editor-config/" target="_blank" rel="noopener">editorconfig</a>,以及配置解释)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure><p>还有一点要注意,假如没有效果,vscode需要安装一个插件<code>EditorConfig for VS Code</code>,其他编译器不太清楚</p><h2 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h2><p>处理一下ES6,以及js文件的webpack的loader配置</p><blockquote><p>今天装了babel-loader8.0.0 报错报一上午,心态都搞崩了,所以这里我使用的是7版本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader@7 babel-core babel-preset-env -D</span><br></pre></td></tr></table></figure><p>在webpack.config.base.js&gt;module&gt;rules里面添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建文件 .babelrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"env"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先检查开发环境</p><p>我新建了一个es6语法的js 导入到app.vue里面</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FmZ8Vjf0BJQwKGz7jqt6XgT36Xom.png" alt=""></p><p>运行结果</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FlJhUUj3tL3YkdZ3Gm3AgRxio_Ha.png" alt=""></p><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p>eslint的安装相对简单,可以看<a href="https://github.com/standard/eslint-config-standard" target="_blank" rel="noopener">官方指南</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint eslint-config-standard eslint-plugin-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node</span><br></pre></td></tr></table></figure><p>因为.vue文件不会是纯js代码,所以,我们需要安装额外的解析的插件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-plugin-html -D</span><br></pre></td></tr></table></figure><p>然后我们配置eslint到我们的项目</p><p>在根目录新建文件.eslintrc</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"html"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"no-new"</span>: <span class="string">"off"</span>  <span class="comment">//因为new Vue但是eslint默认不许new 我们需要把这个关掉</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在package里面添加两行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;lint&quot;: &quot;eslint --ext .js --ext .jsx --ext .vue src/&quot;,</span><br><span class="line">&quot;lint-fix&quot;: &quot;eslint --fix --ext .js --ext .jsx --ext .vue src/&quot;</span><br></pre></td></tr></table></figure><p>现在运行<code>npm run lint</code>即检查项目</p><p>运行<code>npm run lint-fix</code>,即是将不规范的地方修正</p><p>下一步我们配置到我们的webpack里面让运行的时候同时检查代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-loader babel-eslint -D</span><br></pre></td></tr></table></figure><p>改写配置文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;plugins&quot;:[</span><br><span class="line">    &quot;html&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;parser&quot;:&quot;babel-eslint&quot;,</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;no-new&quot;: &quot;off&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在webpack.config.base里面的module&gt; rules 里面加一个字段 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: /\.(vue|js|jsx)$/,</span><br><span class="line">        loader: &apos;eslint-loader&apos;,</span><br><span class="line">        exclude:/node_modules/,</span><br><span class="line">        enforce: &apos;pre&apos;     //预处理</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>至此,基本的vue项目骨架的搭建完毕了,后面还有vue-router 以及vuex less的安装,请查看我的<a href="https://github.com/vkcyan/vue-MYCLI/tree/comprehensive" target="_blank" rel="noopener">github</a>,当然他没有vue-cli那么强大,或许最大的益处是让我们熟悉一个vue项目的大致webpack配置,当然我们可以一步一步的优化项目</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack4-Vue搭建自己的Vue-cli&quot;&gt;&lt;a href=&quot;#webpack4-Vue搭建自己的Vue-cli&quot; class=&quot;headerlink&quot; title=&quot;webpack4+Vue搭建自己的Vue-cli&quot;&gt;&lt;/a&gt;webpack4+Vue搭建
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue-router与Vuex</title>
    <link href="http://yoursite.com/2018/08/28/vue-router%20%E4%B8%8E%20vuex/"/>
    <id>http://yoursite.com/2018/08/28/vue-router 与 vuex/</id>
    <published>2018-08-27T16:00:00.000Z</published>
    <updated>2018-09-05T01:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-router与Vuex特性总结"><a href="#Vue-router与Vuex特性总结" class="headerlink" title="Vue-router与Vuex特性总结"></a>Vue-router与Vuex特性总结</h1><p>一直以来,写vue项目一直都是使用cli去帮我们生成,一切都帮我们做好了,回头自己搭建项目,发现很多配置都是很麻烦的,也很有价值,本文章就记录自己搭建的vue</p><p>项目的vue-rouer以及vuex应用</p><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router -S    //s为生成环境</span><br></pre></td></tr></table></figure><p>安装完成后,在src后面新建config文件夹</p><p>里面新建rouer.js以及routes.js</p><p>在routes.js里面写路由配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Todo <span class="keyword">from</span> <span class="string">'../views/todo/todo.vue'</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'../views/login/login.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/app'</span>,</span><br><span class="line">    component: Todo</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    ccomponent: Login</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在rouer.js里面写项目配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./routes'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    routes</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再index.js里面导入vuerouter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./app.vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assets/style/global.styl'</span></span><br><span class="line"><span class="keyword">import</span> createRouter <span class="keyword">from</span> <span class="string">'./config/router'</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(root)</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> router = createRouter()</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(root)</span><br></pre></td></tr></table></figure><p>到这一步看似完成了,但是在app.vue里面还没有进行路由的显示,这时候无论我们怎么跳转都不会有反应</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">headers</span>&gt;</span><span class="tag">&lt;/<span class="name">headers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footers</span>&gt;</span><span class="tag">&lt;/<span class="name">footers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置路由重定向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    redirect: <span class="string">'/app'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>配置路由为history模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export default () =&gt; &#123;</span><br><span class="line">  return new Router(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    mode: &apos;history&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里要注意 也是我遇到的bug,设置为histroy后,跳转路由出现了Error,</p><p>貌似是webpack-dev-server的问题,修改一下配置文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> devServer = &#123;</span><br><span class="line">  port: <span class="string">'8000'</span>,</span><br><span class="line">  host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">  overlay: &#123; <span class="comment">// 配置错误</span></span><br><span class="line">    errors: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  historyApiFallback: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就完成了基本的路由配置</p><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><p>base: 指定路由前缀,但是不通过前缀也可以访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default () =&gt; &#123;</span><br><span class="line">  return new Router(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    mode: &apos;history&apos;,</span><br><span class="line">    base: &apos;/base/&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://router.vuejs.org/zh/api/#active-class" target="_blank" rel="noopener">linkActiveClass</a>: 全局配置 <code>&lt;router-link&gt;</code> 的默认“激活 class 类名” </p><p><a href="https://router.vuejs.org/zh/api/#exact-active-class" target="_blank" rel="noopener">linkExactActiveClass</a>: 全局配置 <code>&lt;router-link&gt;</code> 精确激活的默认的 class。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export default () =&gt; &#123;</span><br><span class="line">  return new Router(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    mode: &apos;history&apos;,</span><br><span class="line">    linkActiveClass: &apos;active-link&apos;,</span><br><span class="line">    linkExactActiveClass: &apos;exact-active-link&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue-router 精准匹配到的路径会添加linkExactActiveClass</p><p>vue-rourer 匹配到了后就加上linkActiveClass</p><p>scrollBehavior 滚动行为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    mode: <span class="string">'history'</span>,</span><br><span class="line">    linkActiveClass: <span class="string">'active-link'</span>,</span><br><span class="line">    linkExactActiveClass: <span class="string">'exact-active-link'</span>,</span><br><span class="line">    scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">      <span class="comment">// to是前往的路由</span></span><br><span class="line">      <span class="comment">// from就是之前的路由</span></span><br><span class="line">      <span class="comment">// savedPosition记录滚动条1的位置</span></span><br><span class="line">      <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">        <span class="keyword">return</span> savedPosition</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parseQuery / stringifyQuery</p><p>提供自定义查询字符串的解析/反解析函数。 </p><p><a href="fallback">fallback </a>  当浏览器不支持 <code>history.pushState</code> 控制路由是否应该回退到 <code>hash</code> 模式 </p><h3 id="路由的跳转"><a href="#路由的跳转" class="headerlink" title="路由的跳转"></a>路由的跳转</h3><p>我们可以给路由起名字,让他可以在页面里面通过名字进行跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/app'</span>,</span><br><span class="line">    component: Todo,</span><br><span class="line">    name: <span class="string">'app'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  app.vue</span><br><span class="line">  &lt;router-link :to=<span class="string">"&#123;name: 'app'&#125;"</span>&gt; app &lt;<span class="regexp">/router-link&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以将一些页面的配置放在meta里面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meta: &#123;</span><br><span class="line">      title: <span class="string">'主页  '</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置子路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;test&apos;,</span><br><span class="line">        component: Login</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>注意一点配置子路由的时候在子页面也要加上 \<router-view>否则也会没有效果</router-view></p><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><blockquote><p>巨坑,webpack真的是巨坑,自动匹配路由生成js文件,导致我访问二级目录或者多级目录就404,谷歌啊,看文档啊搞一下午才搞定,解决方案</p></blockquote><p>在输出目录加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publicPath: &apos;/&apos;</span><br></pre></td></tr></table></figure><p>在devServer加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publicPath: &apos;/&apos;</span><br></pre></td></tr></table></figure><p>文档讲的模模糊糊,或者本人理解能力有限,虽然最后解决了,但是这还有运气成分在里面</p><p>我们可以在路由里面指定一个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/app/:id'</span>,</span><br><span class="line">    component: Todo,</span><br><span class="line">    name: <span class="string">'app'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'主页'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>看看$router对面里面可以获取到什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"/app/123"</span>&gt; app &lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.....</span></span><br><span class="line"><span class="regexp"> mounted () &#123;</span></span><br><span class="line"><span class="regexp">    console.log(this.$route)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br></pre></td></tr></table></figure><p><img src="http://on7r0tqgu.bkt.clouddn.com/Frl9N788oDn5Hajq17INw_YtWl-i.png" alt=""></p><p>我们可以路由里面进行进行props传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &apos;/app/:id&apos;,</span><br><span class="line">    props: true, // 会传给组件</span><br><span class="line">    component: Todo,</span><br><span class="line">    name: &apos;app&apos;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: &apos;主页&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>我们在todo里面查看id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props: [&apos;id&apos;],</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    console.log(this.id)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>可以在props里面做很多操作,这样做有利与解耦</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   path: <span class="string">'/app/:id'</span>,</span><br><span class="line">   props: <span class="function">(<span class="params">router</span>) =&gt;</span> (&#123; <span class="attr">id</span>: router.query.d &#125;),  <span class="comment">//获取参数d</span></span><br><span class="line">   <span class="comment">// props: &#123;</span></span><br><span class="line">   <span class="comment">//   id: 123 // 可以直接给值</span></span><br><span class="line">   <span class="comment">// &#125;,</span></span><br><span class="line">   <span class="comment">// props: true, // 会传给组件</span></span><br><span class="line">   component: Todo,</span><br><span class="line">   name: <span class="string">'app'</span>,</span><br><span class="line">   meta: &#123;</span><br><span class="line">     title: <span class="string">'主页'</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h3 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h3><p>给路由一个名字,在components里面定义路由下,根据名字显示组件</p><p>app.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=<span class="string">"fade"</span>&gt;</span><br><span class="line">      &lt;router-view /&gt;</span><br><span class="line">    &lt;<span class="regexp">/transition&gt;</span></span><br><span class="line"><span class="regexp">    &lt;footers&gt;&lt;/</span>footers&gt;</span><br><span class="line">    &lt;router-view name=<span class="string">"a"</span>/&gt;</span><br></pre></td></tr></table></figure><p>我们创建两个router-view</p><p>在router配置里面配置不一样的名字的组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   path: <span class="string">'/app'</span>,</span><br><span class="line">   components: &#123;</span><br><span class="line">     <span class="keyword">default</span>: Todo,</span><br><span class="line">     a: Login</span><br><span class="line">   &#125;,</span><br><span class="line">   name: <span class="string">'app'</span>,</span><br><span class="line">   meta: &#123;</span><br><span class="line">     title: <span class="string">'主页'</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   path: <span class="string">'/login'</span>,</span><br><span class="line">   components: &#123;</span><br><span class="line">     <span class="keyword">default</span>: Login,</span><br><span class="line">     a: Todo</span><br><span class="line">   &#125;,</span><br><span class="line">   name: <span class="string">'login'</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>这样会有一种互换的效果因为路由名字不一样</p><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  console.log(&apos;我是路由守卫beforeEach&apos;)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeResolve((to, from, next) =&gt; &#123;</span><br><span class="line">  console.log(&apos;我是路由守卫beforeResolve&apos;)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach((to, from) =&gt; &#123;</span><br><span class="line">  console.log(&apos;我是路由守卫afterEach&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\spring\AppData\Local\Temp\1535631559145.png" alt=""></p><p>beforeEach可以做验证,必须登录</p><p>比如只让login走其他的都不允许路由跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (to.fullPath === <span class="string">'/login'</span>) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>比如强制路由跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (to.fullPath === &apos;/app&apos;) &#123;</span><br><span class="line">    next(&apos;/login&apos;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>或者进行路由的控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  console.log(&apos;我是路由守卫beforeEach&apos;, to.fullPath)</span><br><span class="line">  if (to.fullPath !== &apos;/app&apos;) &#123;</span><br><span class="line">    next(&#123; name: &apos;app&apos; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可以配置单路由的路由守卫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/app'</span>,</span><br><span class="line">    component: Todo,</span><br><span class="line">    name: <span class="string">'app'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'主页'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeEnter (to, <span class="keyword">from</span>, next) &#123; <span class="comment">// 在进入app就会触发 </span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'app start'</span>)</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>在组件里面依旧可以创建钩子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'todo的守卫开始了'</span>)</span><br><span class="line">    next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'获取data数据 filter'</span>, vm.filter)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'todo的守卫更新了'</span>)</span><br><span class="line">    next()</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'todo的守卫离开了'</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.confirm(<span class="string">'真的真的退出吗'</span>)) &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><img src="http://on7r0tqgu.bkt.clouddn.com/FrT0q74ftI90YZaJF4A9cqnHKbuC.png" alt=""></p><p>通过路由的变化去触发更新的路由钩子</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FoUy3Y6zHgOyMGrhmuCMNHn4nwOS.png" alt=""></p><p>还可以在路由里面对数据进行控制,但是注意不了直接获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'todo的守卫开始了'</span>)</span><br><span class="line">   next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'获取data数据 filter'</span>, vm.filter)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>或者对填写表单,用户离开时候给一个提示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'todo的守卫离开了'</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.confirm(<span class="string">'真的真的退出吗'</span>)) &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>异步组件</p><p>使用异步组件需要一个插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-syntax-dynamic-import -D</span><br></pre></td></tr></table></figure><p>修改一下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    redirect: <span class="string">'/app'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/app/:id'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/todo/todo.vue'</span>),</span><br><span class="line">    name: <span class="string">'app'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'主页'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/login/login.vue'</span>),</span><br><span class="line">    name: <span class="string">'login'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在就是异步加载组件了,我们的组件会在加载的时候import进来</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FmMd7yoEQzFcK_fEwjdgXqw0nYBc.png" alt=""></p><h2 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h2><blockquote><p>因为没有接触用它vuex比较多的项目,导致vuex看过就忘了,这次写全一点</p></blockquote><p>安装Vuex</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex -S</span><br></pre></td></tr></table></figure><p>新建文件夹store&gt;store.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">      updateCount (state, num) &#123;</span><br><span class="line">        state.count = num</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在index.js里面引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./app.vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assets/style/global.styl'</span></span><br><span class="line"><span class="keyword">import</span> createRouter <span class="keyword">from</span> <span class="string">'./config/router'</span></span><br><span class="line"><span class="keyword">import</span> createstore <span class="keyword">from</span> <span class="string">'./store/store'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter()</span><br><span class="line"><span class="keyword">const</span> store = createstore()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><p>mutations里面的方法可以通过commit来进行使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    console.log(this.$store)</span><br><span class="line">    let i = 1</span><br><span class="line">    setInterval(() =&gt; &#123;</span><br><span class="line">      this.$store.commit(&apos;updateCount&apos;, i++)</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      return this.$store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在应对大型的数据的时候,我么你的vuex尽可能的分模块,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> defaultState <span class="keyword">from</span> <span class="string">'./state/state'</span></span><br><span class="line"><span class="keyword">import</span> defauleMutations <span class="keyword">from</span> <span class="string">'./mutations/mutations'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: defaultState,</span><br><span class="line">    mutations: defauleMutations</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p>getters可以对data数据进行二次处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="comment">// 可以理解为computed</span></span><br><span class="line">  fullName (state) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`姓名:<span class="subst">$&#123;state.name&#125;</span>,年龄:<span class="subst">$&#123;state.count&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">    &#125;,</span><br><span class="line">    fullName () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.fullName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用es7 甚至es8的语法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-preset-stage-1 -D</span><br></pre></td></tr></table></figure><p><code>this.$store.state.count</code>这样的写法并不是很好,官方提供了一个辅助函数<code>mapState</code>,当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性 </p><h5 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapState([<span class="string">'count'</span>]),</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>还可以是对象或者函数的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...mapState(&#123;</span><br><span class="line">     counter: &apos;count&apos;</span><br><span class="line">   &#125;),</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...mapState(&#123;</span><br><span class="line">      counter: (state) =&gt; &#123;</span><br><span class="line">        return state.count</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><h5 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...mapGetters([<span class="string">'fullName'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//..............</span></span><br><span class="line"></span><br><span class="line">...mapGetters(&#123;</span><br><span class="line">      fullName: <span class="string">'fullName'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="mutations-1"><a href="#mutations-1" class="headerlink" title="mutations"></a>mutations</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 <strong>事件类型 (type)</strong> 和 一个 <strong>回调函数 (handler)</strong>。</p><p>假如要传递多个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">updateCount (state, &#123; num, num2 &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num2)</span><br><span class="line">    state.count = num</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>传一个对象,返回通过解构去得到参数</p><p>当然数据可以直接修改,但是不推荐这么做</p><p>我们在开发环境可以使用strict去限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const isDev = process.env.NODE_ENV === &apos;development&apos;</span><br><span class="line"></span><br><span class="line">export default () =&gt; &#123;</span><br><span class="line">  return new Vuex.Store(&#123;</span><br><span class="line">    strict: isDev,</span><br><span class="line">    state: defaultState,</span><br><span class="line">    mutations,</span><br><span class="line">    getters</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我么在去直接修改store里面的数值,vue就发出警告</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.state.count = <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: Error in callback for watcher &quot;function () &#123; return this._data.$$state &#125;&quot;: &quot;Error: [vuex] Do not mutate vuex store state outside mutation handlers.&quot;</span><br></pre></td></tr></table></figure><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>这就是异步的mutations,但是我们可以再actions里面处理mutations,使用promise来进行控制等等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  updateCountSync (store, data) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      store.commit(<span class="string">'updateCount'</span>, data.num)</span><br><span class="line">    &#125;, data.time)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line"><span class="keyword">this</span>.updateCountSync(&#123;</span><br><span class="line">   time: <span class="number">2000</span>,</span><br><span class="line">   num: <span class="number">5</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="mapActions-mapMutations"><a href="#mapActions-mapMutations" class="headerlink" title="mapActions, mapMutations"></a>mapActions, mapMutations</h3><blockquote><p> 组件绑定的辅助函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapGetters, mapActions, mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line"> methods: &#123;</span><br><span class="line">    ...mapActions([<span class="string">'updateCountSync'</span>]),</span><br><span class="line">    ...mapMutations([<span class="string">'updateCount'</span>])</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// .......</span></span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">this</span>.updateCountSync(&#123;</span><br><span class="line">    time: <span class="number">2000</span>,</span><br><span class="line">    num: <span class="number">5</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.updateCount(i++)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vuex的模块化"><a href="#Vuex的模块化" class="headerlink" title="Vuex的模块化"></a>Vuex的模块化</h2><p>当业务变的非常庞大的时候,业务的所有状态都会集中在一个对象里面,当业务变动非常复杂的时候,vue允许我们将store分割成模块(module),每个模块都有他的state、mutation、action、getter </p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">export default () =&gt; &#123;</span><br><span class="line">  return new Vuex.Store(&#123;</span><br><span class="line">    strict: isDev,</span><br><span class="line">    state: state,</span><br><span class="line">    mutations,</span><br><span class="line">    getters,</span><br><span class="line">    actions,</span><br><span class="line">    modules: &#123;</span><br><span class="line">      a: &#123;</span><br><span class="line">        state: &#123;</span><br><span class="line">          text: 1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      b: &#123;</span><br><span class="line">        state: &#123;</span><br><span class="line">          text: 2</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testA () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.b.text</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...mapState(&#123;</span><br><span class="line">     textA: state =&gt; state.a.text</span><br><span class="line">   &#125;),</span><br></pre></td></tr></table></figure><h3 id="mutations-2"><a href="#mutations-2" class="headerlink" title="mutations"></a>mutations</h3><blockquote><p>用法和全局mutations一样,vue会自动给我们挂载到全局</p><p>当然可以设置单独的命名空间</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a: &#123;</span><br><span class="line">        namespaced: <span class="literal">true</span>, <span class="comment">// 设置单独的命名空间</span></span><br><span class="line">        state: &#123;</span><br><span class="line">          text: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mutations: &#123;</span><br><span class="line">          updateText (state, text) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(state)</span><br><span class="line">            state.text = text</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"> <span class="comment">// .........</span></span><br><span class="line">methods: &#123;</span><br><span class="line"> ...mapMutations([<span class="string">'updateCount'</span>, <span class="string">'a/updateText'</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">this</span>[<span class="string">'a/updateText'</span>](<span class="number">123</span>)  <span class="comment">//调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getters-1"><a href="#getters-1" class="headerlink" title="getters"></a>getters</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">          textPlus (state) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`我是<span class="subst">$&#123;state.text&#125;</span>`</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//...........</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([<span class="string">'fullName'</span>, <span class="string">'a/textPlus'</span>])</span><br><span class="line">&#125;</span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">this</span>[<span class="string">'a/updateText'</span>](<span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写没办法写在模板里面,我们可以改一下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...mapGetters(&#123;</span><br><span class="line">    &apos;fullName&apos;: &apos;fullName&apos;,</span><br><span class="line">    &apos;textPlus&apos;: &apos;a/textPlus&apos;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这样在模板里面就可以 使用了</p><h3 id="在局部vuex里面可以获取全局的vuex的state"><a href="#在局部vuex里面可以获取全局的vuex的state" class="headerlink" title="在局部vuex里面可以获取全局的vuex的state"></a>在局部vuex里面可以获取全局的vuex的state</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">         textPlus (state, getters, rootState) &#123; <span class="comment">// 第二参数是所有getters的方法 第三参数是全局的state</span></span><br><span class="line">           <span class="keyword">return</span> <span class="string">`我是<span class="subst">$&#123;state.text&#125;</span>,全局state<span class="subst">$&#123;rootState.count&#125;</span>`</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>既然可以获取全局,必然可以获取你想要的模块的state</p><h3 id="actions-1"><a href="#actions-1" class="headerlink" title="actions"></a>actions</h3><p>关于actions基本功能和上面类似,但是在分模块上面存在全局 以及模块将的数据调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">        add (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">          <span class="comment">// commit('updateText', 20)</span></span><br><span class="line">          commit(<span class="string">'updateCount'</span>, <span class="number">100</span>, &#123;<span class="attr">root</span>: <span class="literal">true</span>&#125;) <span class="comment">// 加上&#123;root: true&#125;就是调用全局的vex的mutations</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>调用上面个mutations一样的,以为呢这里加入了命名空间,所以调用要加前缀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    ...mapActions([<span class="string">'updateCountSync'</span>, <span class="string">'a/add'</span>]),</span><br><span class="line">    ...mapMutations([<span class="string">'updateCount'</span>, <span class="string">'a/updateText'</span>])</span><br><span class="line">  &#125;</span><br><span class="line">mounted () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$store)</span><br><span class="line">    <span class="comment">// this.updateCountSync(&#123;</span></span><br><span class="line">    <span class="comment">//   time: 2000,</span></span><br><span class="line">    <span class="comment">//   num: 5</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.updateCount(i++)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">this</span>[<span class="string">'a/add'</span>]()</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="动态注册模块"><a href="#动态注册模块" class="headerlink" title="动态注册模块"></a>动态注册模块</h3><p>模块动态注册功能使得其他 Vue 插件可以通过在 store 中附加新模块的方式来使用 Vuex 管理状态。例如，<a href="https://github.com/vuejs/vuex-router-sync" target="_blank" rel="noopener"><code>vuex-router-sync</code></a> 插件就是通过动态注册模块将 vue-router 和 vuex 结合在一起，实现应用的路由状态管理。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">store.registerModule(<span class="string">'c'</span>, &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    text: <span class="number">33232323</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="vuex的热重载"><a href="#vuex的热重载" class="headerlink" title="vuex的热重载"></a>vuex的热重载</h2><p>关于vuex的来热重载,官方给了详细的配置<a href="https://vuex.vuejs.org/zh/guide/hot-reload.html#%E7%83%AD%E9%87%8D%E8%BD%BD" target="_blank" rel="noopener">热重载</a></p><p>这里根据我自己的环境来配置热重载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state/state'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations/mutations'</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">'./getters/getters'</span></span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'./actions/actions'</span></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">'development'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    strict: isDev,</span><br><span class="line">    state: state,</span><br><span class="line">    mutations, <span class="comment">// 同步方法</span></span><br><span class="line">    getters, <span class="comment">// 处理state</span></span><br><span class="line">    actions <span class="comment">// 异步方法</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept([</span><br><span class="line">      <span class="string">'./state/state'</span>,</span><br><span class="line">      <span class="string">'./mutations/mutations'</span>,</span><br><span class="line">      <span class="string">'./getters/getters'</span>,</span><br><span class="line">      <span class="string">'./actions/actions'</span></span><br><span class="line">    ], () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> newState = <span class="built_in">require</span>(<span class="string">'./state/state'</span>).default</span><br><span class="line">      <span class="keyword">const</span> newMutations = <span class="built_in">require</span>(<span class="string">'./mutations/mutations'</span>).default</span><br><span class="line">      <span class="keyword">const</span> newGetters = <span class="built_in">require</span>(<span class="string">'./getters/getters'</span>).default</span><br><span class="line">      <span class="keyword">const</span> newActions = <span class="built_in">require</span>(<span class="string">'./actions/actions'</span>).default</span><br><span class="line"></span><br><span class="line">      store.hotUpdate(&#123;</span><br><span class="line">        state: newState,</span><br><span class="line">        mutations: newMutations,</span><br><span class="line">        getters: newGetters,</span><br><span class="line">        actions: newActions</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vuex的其他API"><a href="#Vuex的其他API" class="headerlink" title="Vuex的其他API"></a>Vuex的其他API</h2><p>store.watch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">store.watch(</span><br><span class="line">  (state) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> state.count</span><br><span class="line">  &#125;,</span><br><span class="line">  (newCount) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'state的count更新了'</span>, newCount)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>只要state,count发生变化,就会执行回调</p><p>要停止侦听，调用此方法返回的函数即可停止侦听</p><p>store.subscribe   订阅 store 的 mutation </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.subscribe(<span class="function">(<span class="params">mutations, state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(mutations.type) <span class="comment">// 传入的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(mutations.payload) <span class="comment">// 接受的参数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>只要mutations被调用,就会触发这个</p><p>store.subscribeAction 订阅 store 的 action</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.subscribeAction(<span class="function">(<span class="params">action, state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(action.type) <span class="comment">// 传入的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(action.payload) <span class="comment">// 接受的参数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一个vuex+vue-router的项目构架</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FtOzc0LclVcvmX62-7IVAvacI3Sh.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue-router与Vuex特性总结&quot;&gt;&lt;a href=&quot;#Vue-router与Vuex特性总结&quot; class=&quot;headerlink&quot; title=&quot;Vue-router与Vuex特性总结&quot;&gt;&lt;/a&gt;Vue-router与Vuex特性总结&lt;/h1&gt;&lt;p&gt;一直
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>回调函数的3种实现方法</title>
    <link href="http://yoursite.com/2018/08/24/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%843%E7%A7%8D%E5%BD%A2%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/08/24/回调函数的3种形式/</id>
    <published>2018-08-23T16:00:00.000Z</published>
    <updated>2018-09-13T01:32:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回调函数的3种实现方法"><a href="#回调函数的3种实现方法" class="headerlink" title="回调函数的3种实现方法"></a>回调函数的3种实现方法</h1><p>在js里面回调一直是很有意思的话题</p><p>在es5没有出现之前</p><p>基本上所有的回调都是用callback的形式来实现的</p><p>让我们看看比较优雅的callback代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">call</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"回调执行完毕"</span>);</span><br><span class="line">    call(<span class="string">"我第二"</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解决方案1 callback 回调</span></span><br><span class="line">ajax(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    ajax_one(<span class="string">"我第三"</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax_one</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  ajax_two()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax_two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"我第四"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是一个函数的最后去回调一个函数</p><p>如果太对回调写在一起就会产生回调金字塔..</p><p>相信开发者现在已经很少去用这用的形式了</p><p>-</p><p>到了es6的时代 大名鼎鼎的promise出现了</p><p>在回调上面有了更加优雅的实现方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Promise进行回调的控制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">ward</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(ward)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样的代码没有嵌套函数</span></span><br><span class="line">delay(<span class="string">'值1'</span>)</span><br><span class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="keyword">return</span> delay(<span class="string">'值2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">res</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="keyword">return</span> delay(<span class="string">"值3"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">res</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里明显可以看到,代码里面没有回调了都是用Promise对象执行结束的then来控制回调,已经很不错了,非常好用~</p><p>es7的async+await</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用async + await 一起使用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">ward</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(ward)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> word = <span class="keyword">await</span> delay(<span class="string">'1'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(word);</span><br><span class="line">  <span class="keyword">let</span> word2 = <span class="keyword">await</span> delay(<span class="string">'2'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(word2);</span><br><span class="line">  <span class="keyword">let</span> word3 = <span class="keyword">await</span> delay(<span class="string">'3'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(word3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start();</span><br></pre></td></tr></table></figure><p>这里实现了和上面promise一样的效果,明显看到代码更加优雅 异步使用async+await控制同步,</p><p>Promise+async/await食用更佳哦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;回调函数的3种实现方法&quot;&gt;&lt;a href=&quot;#回调函数的3种实现方法&quot; class=&quot;headerlink&quot; title=&quot;回调函数的3种实现方法&quot;&gt;&lt;/a&gt;回调函数的3种实现方法&lt;/h1&gt;&lt;p&gt;在js里面回调一直是很有意思的话题&lt;/p&gt;
&lt;p&gt;在es5没有出现之
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 异步的前世今生</title>
    <link href="http://yoursite.com/2018/08/20/JavaScript%20%E5%BC%82%E6%AD%A5%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>http://yoursite.com/2018/08/20/JavaScript 异步的前世今生/</id>
    <published>2018-08-19T16:00:00.000Z</published>
    <updated>2018-09-05T01:53:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-异步的前世今生"><a href="#JavaScript-异步的前世今生" class="headerlink" title="JavaScript - 异步的前世今生"></a>JavaScript - 异步的前世今生</h1><p>​    在开始接触JavaScript的时候,书上有一句话我记忆深刻,<strong>JavaScript是一门单线程语言</strong>,不管从什么途径去获取这个消息,前端开发者都会记住,哦~~,JavaScript是一门单线程语言,所以alert()会卡住</p><p>​     <strong>为什么JavaScript是一门单线程语言?因为什么原因让JavaScript出生就是单线程语言?</strong></p><p>​    提出问题,必然解决问题,从JavaScript出生说起,最开始JavaScript是配合html去完成对dom的控制,优化用户交互,于是问题来了</p><ul><li>js可以修改Dom结构</li><li>浏览器渲染Dom结构</li></ul><p>假如同时执行,会发生什么,假如同时操作同一个Dom怎么办,</p><p>同理 两段js都修改Dom结构,假如同时操作Dom会发生什么</p><p>js没有执行的时候,浏览器Dom渲染,js执行的时候,浏览器Dom停止渲染,html结构树本来是就是从上往下渲染,也就是说,浏览器渲染Dom本身就是单线程,js为了避免发生Dom冲突,没有办法只能成为单线程语言</p><p>但是单线程的硬伤出现了,单线程意味着页面加载会卡顿,线程被占用浏览器卡死</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"start"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;  <span class="comment">//单线程占用</span></span><br><span class="line">    sum++</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line">alert(<span class="string">"100"</span>)   <span class="comment">//单线程占用</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我终于执行啦"</span>);</span><br></pre></td></tr></table></figure><p>​    例如上面的代码,浏览器资源类占用,就会发生可怕的事情,浏览器卡死,也许这里for循环不形式,但是现实开发里面同步ajax请求慢的时候页面卡死是正常事</p><h3 id="同步解决方案-异步"><a href="#同步解决方案-异步" class="headerlink" title="同步解决方案 - 异步"></a>同步解决方案 - 异步</h3><p>说到异步,不得不谈大名鼎鼎的event-loop(事件轮询)</p><p>相信开发者一定看过<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">阮一峰大神对Event loop的解释</a>,除了图有点看不懂之外,其他都讲的很请求</p><p>这里要说一道比较老的面试题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"我是定制器"</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"我是主进程"</span>);</span><br></pre></td></tr></table></figure><p>很简单 先执行<code>console.log(&quot;我是主进程&quot;);</code> ,为什么呢?即使因为事件轮询</p><p>当浏览器从上往下解析,遇到setTimeout,setTimeout是异步任务,浏览器就会将他放入异步任务里面,然后执行主线程的代码,当主线程的代码执行完毕,事件轮询就是去查看异步任务,于是执行了setTimeout里面的函数</p><p>这就是事件轮询</p><p>这里借阅阮一峰大神的一段博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</span><br><span class="line"></span><br><span class="line">如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</span><br><span class="line"></span><br><span class="line">JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</span><br><span class="line"></span><br><span class="line">于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</span><br><span class="line"></span><br><span class="line">具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</span><br><span class="line"></span><br><span class="line">（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</span><br><span class="line"></span><br><span class="line">（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</span><br><span class="line"></span><br><span class="line">（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</span><br><span class="line"></span><br><span class="line">（4）主线程不断重复上面的第三步。</span><br></pre></td></tr></table></figure><p>​    event-loop就像哨兵一样,监视着异步队列,一旦有异步代码,就会在主线程执行完毕将异步方法,读取到主线程,在回去监视异步队列,所以event-loop也叫事件轮询</p><h3 id="jQuery-deferred"><a href="#jQuery-deferred" class="headerlink" title="jQuery.deferred()"></a>jQuery.deferred()</h3><p>无法改变 JS 异步和单线程的本质 </p><p>只能从写法上杜绝 callback 这种形式 </p><p>他是语法糖,但是解构了代码</p><p>体现了编程思想 : 开放封闭原则</p><blockquote><p>对拓展开放,对修改封闭,      越是深入模块化,越是体现这样的实现</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　$.ajax(&#123;</span><br><span class="line">　　　　url: <span class="string">"test.html"</span>,</span><br><span class="line">　　　　success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(<span class="string">"哈哈，成功了！"</span>);</span><br><span class="line">　　　　&#125;,</span><br><span class="line">　　　　error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(<span class="string">"出错啦！"</span>);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure><p>老版本的使用的是回调函数形式,那么假如我们想修改代码,势必要对$.ajax({})里面的所有代码进行变成 这就成了</p><p>对拓展封闭,对修改封闭,这是对在开发上非常不友好的变成方式,牵一发而动全身</p><p>当deferred出现后,ajax变成了链式调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　$.ajax(<span class="string">"test.html"</span>)</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><p>这里明显可以看到对修改封闭,对拓展开放</p><p>假如我们想拓展</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"第二个回调函数！"</span>);&#125; );</span><br></pre></td></tr></table></figure><p>完全不影响之前的代码,代码耦合性低</p><p>在我最开始接触jquery的时候,ajax有三种写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//成功回调</span></span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//失败回调</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;url&#125;)</span><br><span class="line">.done(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//成功回调</span></span><br><span class="line">&#125;)</span><br><span class="line">.fail((<span class="number">0</span>=&gt; &#123;</span><br><span class="line">    <span class="comment">//失败回调</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;url&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//成功回调</span></span><br><span class="line">&#125;,</span><br><span class="line">()=&gt; &#123;</span><br><span class="line">    <span class="comment">//失败回调</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>刚开始不解,为什么第一种是淘汰的写法.再后来渐渐深入才发现回调的局限性,</p><ul><li>耦合性太高,</li><li>不支持链式调用,</li><li>不利于维护,回调里代码过于复杂会产生风险</li></ul><p>这让我想探究一下,如何实现.done.fail,所以就不得不说jQuery的deferred</p><p><a href="http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html" target="_blank" rel="noopener">阮一峰大神对deferred的讲解</a></p><p>在使用jq我们可以使用deferred帮助我们控制异步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitHandle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> dtd = $.Deferred()</span><br><span class="line">      <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span> (<span class="params">dtd</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"执行完成"</span>);</span><br><span class="line">          dtd.resolve()</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(task, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">return</span> dtd.promise()  <span class="comment">//返回pomise对象 防止在回调里面执行控制回调的函数 例如reject()</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> wait(dtd) <span class="comment">//返回wait的执行结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    waitHandle()</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">      &#125;, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hahah"</span>);</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">      &#125;, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hahah"</span>);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>这里我就不赘述了,前人已经全面的总结了;这里明显看到,这是已经初步提出了promise的概念,对日后的标准建立的基础</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>对于低版本浏览器,想要使用第三方库,可以使用<a href="https://cdn.bootcss.com/bluebird/3.5.1/bluebird.min.js" target="_blank" rel="noopener">bluebird.js</a>,对promise进行实现</p><p>老生长谈了,开发必须要会</p><blockquote><p>这是jq的deferred的进阶版啊,,开发者卸磨杀驴,竟然说jq淘汰了,一叶障目</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">     img.onload = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">       resolve(img)</span><br><span class="line">     &#125;</span><br><span class="line">     img.onerror = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">       reject(<span class="string">"图片加载失败"</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     img.src = src</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> load1 = loadImg(<span class="string">"https://secure.gravatar.com/avatar/7337a05ac8210b3f1b522818cd31b90d?s=86"</span>)</span><br><span class="line"><span class="keyword">var</span> load2 = loadImg(<span class="string">"https://avatars2.githubusercontent.com/u/33681955?s=460&amp;v=4"</span>)</span><br><span class="line">load1.then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.width);</span><br><span class="line">  <span class="keyword">return</span> load2   <span class="comment">//后面的是load2的回调  对于请求串联 可以这么写 </span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.width);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise.all </p><blockquote><p>接受一个Promise对象的数组,待全部完成后,统一执行then,失败一个catch</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([load1,load2])</span><br><span class="line">  .then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch (<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); <span class="comment">//假如有一个失败就会返回catch</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Pormise.race</p><blockquote><p>接收一个包含多个Promise对象的数组,主要完成一个就执行then,失败一个catch</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([load1, load2])</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//成功一个立马返回</span></span><br><span class="line">&#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(res); <span class="comment">//假如有一个失败就会返回catch</span></span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><h4 id="在Peomise上还要说一点就是状态变化"><a href="#在Peomise上还要说一点就是状态变化" class="headerlink" title="在Peomise上还要说一点就是状态变化"></a>在Peomise上还要说一点就是状态变化</h4><p>三种状态: pending(待定的) fulfilled(满足的) rejected(拒绝) </p><p>规则: <strong>状态变化不可逆</strong></p><p>在初始状态下,Promise是pending 只有两种情况</p><ul><li>Promise执行成功 pending 成功状态变成fulfilled</li><li>Promise执行成功 pending 失败状态变成rejected</li></ul><p>了解一下</p><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>then是将callback进行拆分了</p><p>关于async/await 其实网上资料也挺多的,将异步代码同步进行,取消了.then这样的写法,回归本源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> load = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result1 = <span class="keyword">await</span> loadImg(load1)</span><br><span class="line">  <span class="built_in">console</span>.log(result1);</span><br><span class="line">  <span class="keyword">let</span> result2 = <span class="keyword">await</span> loadImg(load2)</span><br><span class="line">  <span class="built_in">console</span>.log(result2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="总结一下JavaScript异步的前世今生"><a href="#总结一下JavaScript异步的前世今生" class="headerlink" title="总结一下JavaScript异步的前世今生"></a>总结一下JavaScript异步的前世今生</h5><ul><li>JavaScript是单线程,两段js不可以同时进行</li><li>原因是为了避免 DOM的渲染冲突</li><li>异步就是”无奈的解决方案”,但是初期有很多问题</li><li>异步是event loop实现的,事件轮询 异步方法 进入的异步队列,主线程执行完毕才会去执行异步队列里面的代码</li><li>jQuery Deferred,改变了异步只能由callback操作这个问题</li><li>deferred和Promise 有区别的 Promise对deferred进行优化 ,让Promise对象只能被动监听结果,避免冲突</li><li>Promise的出现成为了对异步的最佳解决方案相对于callback,极大的降低了耦合性</li><li>async/await 配合Promise 成为终极解决方案,但是ES7为成为正式版,未来仍需参考</li></ul><h3 id="异步的解决方案"><a href="#异步的解决方案" class="headerlink" title="异步的解决方案"></a>异步的解决方案</h3><ul><li>回调函数 - callback</li><li>初代链式 -  deferred (我觉得这个有必要提出来,改变js异步编程的关键)</li><li>成熟方案 - promise</li><li>终极方案 - async/await + promise</li><li>迭代器  Generator(同样实现异步,但是被async/await替代) </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-异步的前世今生&quot;&gt;&lt;a href=&quot;#JavaScript-异步的前世今生&quot; class=&quot;headerlink&quot; title=&quot;JavaScript - 异步的前世今生&quot;&gt;&lt;/a&gt;JavaScript - 异步的前世今生&lt;/h1&gt;&lt;p&gt;​ 
      
    
    </summary>
    
      <category term="异步JavaScript" scheme="http://yoursite.com/categories/%E5%BC%82%E6%AD%A5JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>cookie sessionStorage localStorage</title>
    <link href="http://yoursite.com/2018/08/20/cookie%20sessionStorage%20localStorage%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/08/20/cookie sessionStorage localStorage的区别/</id>
    <published>2018-08-19T16:00:00.000Z</published>
    <updated>2018-09-05T01:51:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie-sessionStorage-localStorage"><a href="#cookie-sessionStorage-localStorage" class="headerlink" title="cookie sessionStorage localStorage"></a>cookie sessionStorage localStorage</h1><p>本文主要总结一下,这三者的异同点,特性,以及应用场景</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>​    在我第一次接触到cookie是在学习javaWeb的时候,主要用途是<strong>保存登录信息</strong>,比如退出登录,但是跳转到登录的时候,用户名以及写好了,这就是cookie的功劳</p><p>​    谈一谈cookie的身世吧,在1993年3月份由网景公司发明,Cookie ,小甜点,cookie真的特别小,只能存4KB的数据</p><h4 id="cookie的特点"><a href="#cookie的特点" class="headerlink" title="cookie的特点"></a>cookie的特点</h4><ul><li>虽然存在浏览器,但是一般由服务器生成,可以设置失效时间,如果是浏览器生成的默认浏览器关闭的时候失效</li><li>很小,4KB</li><li>用来保存客户浏览器请求服务器页面的请求信息 ,比如登录信息,但是这样也不太好的地方,尤其是多人使用电脑</li></ul><h4 id="cookie的缺点"><a href="#cookie的缺点" class="headerlink" title="cookie的缺点"></a>cookie的缺点</h4><ul><li>数量以及长度的限制 ,早期浏览器会有数量的限制,现代浏览器假如cookie超过4KB会被截掉</li><li>不可以做到长时间储存</li><li>安全性问题,,拦截者不需要知道cookie的意义,只要原样转发就达到了目的</li><li>每次都会被携带在http头中,所以cookie过多的话,会加重服务器压力</li><li>对于前端开发者,原生接口易用性不好,需要自己封装,或者借助第三方库</li></ul><blockquote><p>Web Storage是为了本地存储数据而出现的,HTML5中的webStorage包括两种存储方式 </p><p>sessionStorage</p><p>localStorage</p><p>只要在有效期类,浏览器每次访问都会将<strong>Storage</strong>载入内存</p></blockquote><h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><p>玩过后端的都知道Session是保存在后端的,追踪用户的会话,<strong>Cookie是通过浏览器记录信息来确认用户信息,Session通过服务器端信息确认身份信息</strong>,浏览器的sessionStorage和后端的session不太一样,但是生命周期又很相似</p><h4 id="sessionStorage的特点"><a href="#sessionStorage的特点" class="headerlink" title="sessionStorage的特点"></a>sessionStorage的特点</h4><ul><li>sessionStorage只能再同一个会话里面才能访问并且当会话结束后,数据也会销毁</li><li>所以sessionStorage并不是持久化存储,而是会话级别的存储,只要浏览器窗口没有关闭,即使刷新,或者进入另一个同源浏览器sessionStorage依旧存在,当浏览器关闭后sessionStorage会被销毁</li></ul><blockquote><p>一句话 : 尽在当前会话下生效,关闭页面或者浏览器关闭后被清除</p></blockquote><p>就本人而言,使用sessionStorage并不是很多,唯一的使用是,a页面传值给B页面,B页面携带参数到到后端,这里我们可以使用sessionStorage进行数据的临时保存,到B页面在进行获取</p><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>从某种角度来说,localStorage真正意义上的实现浏览器本地存储</p><h4 id="localStorage的特点"><a href="#localStorage的特点" class="headerlink" title="localStorage的特点"></a>localStorage的特点</h4><ul><li>localStorage用持久化存储,除非主动删除,否则数据永远不过期,可以存储一些规定不变的信息</li><li>localStorage和sessionStorage一样受同源策略的限制</li><li>相对于cookie,sessionStorage 与localStorage都提供了完善的API</li><li>存储的大小限制为5MB</li></ul><p>但是有一点localStorage是永不过期的,这一点并不是适合所有场景,需要借助第三方库对localStorage进行控制</p><h2 id="三者的异同点"><a href="#三者的异同点" class="headerlink" title="三者的异同点"></a>三者的异同点</h2><table><thead><tr><th>特性</th><th>Cookie</th><th style="text-align:left">localStorage</th><th style="text-align:left">sessionStorage</th></tr></thead><tbody><tr><td>生命周期</td><td>一般由服务器生成,可以设置过期时间,如果是浏览器生成,默认关闭浏览器失效</td><td style="text-align:left">除非被清除,否则永久有效</td><td style="text-align:left">仅在当前会话下生效,关闭页面或浏览器失效</td></tr><tr><td>存放数据</td><td>4KB</td><td style="text-align:left">5MB</td><td style="text-align:left">5MB</td></tr><tr><td>与服务器</td><td>每次都会被携带到HTTP请求里面,所以cookie过多会给服务器带来压力</td><td style="text-align:left">不与服务器通信</td><td style="text-align:left">不与服务器通信</td></tr><tr><td>易用性</td><td>没有完善的API,需要开发人员自己封装</td><td style="text-align:left">有完善的API支持</td><td style="text-align:left">有完善的API支持</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;cookie-sessionStorage-localStorage&quot;&gt;&lt;a href=&quot;#cookie-sessionStorage-localStorage&quot; class=&quot;headerlink&quot; title=&quot;cookie sessionStorage lo
      
    
    </summary>
    
      <category term="浏览器存储" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6 总结 技巧</title>
    <link href="http://yoursite.com/2018/08/15/es6/"/>
    <id>http://yoursite.com/2018/08/15/es6/</id>
    <published>2018-08-14T16:00:00.000Z</published>
    <updated>2018-09-05T01:54:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-总结-技巧"><a href="#ES6-总结-技巧" class="headerlink" title="ES6 总结 技巧"></a>ES6 总结 技巧</h1><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>前端在AMD之前都没有模块化的概念,当然这也是前人的经历,刚开始接触模块化还是比较模糊的概念,看到<code>熟悉[CommonJS](http://javascript.ruanyifeng.com/nodejs/module.html)的标准</code>,不明觉厉,后来慢慢深入,了解了前端模块化发展史 ,从require.js 的AMD 带SeaJs的的CMD 到现在的ES6模块化CommonJS统一江湖</p><p>​    说到模块化不得不说前端打包工具</p><ul><li>一般情况下,大型web应用使用webpack打包   –   功能全面,但是学习成本高,</li><li>对于小型的web项目,可以使用rollup.js打包  –  功能只有一个 打包 学习成本低 快 打包体积小</li></ul><p>视情况而定使用什么工具</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><blockquote><p>小工具 node本地启动http服务</p></blockquote><p>之前我在本地文件夹启动静态服务器 都是通过python或者vscode的<code>live server</code> 现在可以使用node去启动</p><ul><li>安装<a href="https://www.npmjs.com/package/http-server" target="_blank" rel="noopener">http-server</a><br>   启动本地服务    </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install http-server -g</span><br><span class="line">http-server -p 8881</span><br></pre></td></tr></table></figure><p>Class是构造函数的升级</p><h4 id="es5版本构造函数"><a href="#es5版本构造函数" class="headerlink" title="es5版本构造函数"></a>es5版本构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mathHeadle</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.y = y,</span><br><span class="line">  <span class="keyword">this</span>.x = x</span><br><span class="line">&#125;</span><br><span class="line">mathHeadle.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x+<span class="keyword">this</span>.y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> mathHeadle(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m.add());</span><br></pre></td></tr></table></figure><h4 id="es6-class语法"><a href="#es6-class语法" class="headerlink" title="es6 class语法"></a>es6 class语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mathHeadle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (x,y) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我执行了"</span>);</span><br><span class="line">    <span class="keyword">this</span>.x = x,</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">  &#125;  </span><br><span class="line">  add()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x+<span class="keyword">this</span>.y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> mathHeadle(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> mathHeadle); <span class="comment">//function</span></span><br><span class="line"><span class="built_in">console</span>.log(mathHeadle.prototype.constructor === mathHeadle);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(r.__proto__ === mathHeadle.prototype);             <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(r.add());</span><br></pre></td></tr></table></figure><p>es6的class和java的class太像了,构造函数一样,完全使用面向对象去写js,当然<strong>js里面并没有class</strong>,这是一个构造函数的语法糖</p><h4 id="Class-继承"><a href="#Class-继承" class="headerlink" title="Class 继承"></a>Class 继承</h4><p>ES5版本的继承,通过绑定原型实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'eat'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dark'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="keyword">var</span> ha = <span class="keyword">new</span> Dog();</span><br><span class="line">ha.bark()</span><br><span class="line">ha.eat()</span><br></pre></td></tr></table></figure><p>ES6版本的继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (name) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>是动物`</span>);</span><br><span class="line">    <span class="keyword">this</span>.eat()</span><br><span class="line">  &#125;</span><br><span class="line">  eat()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会eat'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>是小狗`</span>);</span><br><span class="line">    <span class="keyword">this</span>.say()</span><br><span class="line">  &#125;</span><br><span class="line">  say () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会say'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ha = <span class="keyword">new</span> Dog(<span class="string">"哈士奇"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈士奇是动物</span></span><br><span class="line"><span class="comment">//我会eat</span></span><br><span class="line"><span class="comment">//哈士奇是小狗</span></span><br><span class="line"><span class="comment">//我会say</span></span><br></pre></td></tr></table></figure><p>java转ES6无压力 和java面向对象写法一模一样</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="ES5异步加载图片"><a href="#ES5异步加载图片" class="headerlink" title="ES5异步加载图片"></a>ES5异步加载图片</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadimg</span>(<span class="params">src, callback, fail</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    callback(img)</span><br><span class="line">  &#125;</span><br><span class="line">  img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    fail()</span><br><span class="line">  &#125;</span><br><span class="line">  img.src = src</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> src = <span class="string">'https://secure.gravatar.com/avatar/7337a05ac8210b3f1b522818cd31b90d?s=86'</span>;</span><br><span class="line">loadimg(src, </span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">img</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width);</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"失败"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="ES6使用Promise加载图片"><a href="#ES6使用Promise加载图片" class="headerlink" title="ES6使用Promise加载图片"></a>ES6使用Promise加载图片</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    img.onload = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      resolve(img)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">"失败"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = src;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> src = <span class="string">'https://secure.gravatar.com/avatar/7337a05ac8210b3f1b522818cd31b90d?s=86'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> load = loadImg(src)</span><br><span class="line">load.then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;   </span><br><span class="line">  <span class="built_in">console</span>.log(res.width);</span><br><span class="line">&#125;)</span><br><span class="line">load.catch(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">load.then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.height);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES6常用功能"><a href="#ES6常用功能" class="headerlink" title="ES6常用功能"></a>ES6常用功能</h2><ul><li>let/const</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line">i = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6  </span></span><br><span class="line"><span class="keyword">const</span> i = <span class="number">10</span></span><br><span class="line">i = <span class="number">100</span>; <span class="comment">//会报错  const不可重新赋值</span></span><br></pre></td></tr></table></figure><ul><li>多行字符串/模板变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'zhangsan'</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="string">''</span></span><br><span class="line">html += <span class="string">'&lt;div&gt;'</span></span><br><span class="line">html += <span class="string">'&lt;p&gt;'</span> + name + <span class="string">'&lt;/p&gt;'</span></span><br><span class="line">html += <span class="string">'&lt;p&gt;'</span> + age + <span class="string">'&lt;/p&gt;'</span></span><br><span class="line">html += <span class="string">'&lt;/div&gt;'</span></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'zhangsan'</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;<span class="subst">$&#123;name&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;<span class="subst">$&#123;age&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><ul><li>解构赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">100</span>,<span class="attr">b</span>:<span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">var</span> a = obj.a</span><br><span class="line"><span class="keyword">var</span> b = obj.b</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'xxx'</span>,<span class="string">'yyy'</span>,<span class="string">'zzz'</span>]</span><br><span class="line"><span class="keyword">var</span> x = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> y = arr[<span class="number">1</span>]</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">100</span>,<span class="attr">b</span>:<span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'xxx'</span>,<span class="string">'yyy'</span>,<span class="string">'zzz'</span>]</span><br><span class="line"><span class="keyword">let</span> &#123;a,b&#125; = obj</span><br><span class="line"><span class="keyword">let</span> [x,y,z] = arr</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a,b,x,y,z);</span><br></pre></td></tr></table></figure><ul><li>块级作用域</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">100</span>,<span class="attr">b</span>:<span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item);  <span class="comment">//这里访问到了 因为 var的作用域问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">100</span>,<span class="attr">b</span>:<span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item);  <span class="comment">//块作用域  会报错</span></span><br></pre></td></tr></table></figure><ul><li>函数默认参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="literal">null</span>) &#123;</span><br><span class="line">    b = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b = <span class="number">0</span></span>) </span>&#123; <span class="comment">//初始值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个转es5的时候,会这样处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">arguments</span>.length &amp;&amp; <span class="built_in">arguments</span>[<span class="number">1</span>] !=<span class="literal">undefined</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>]:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>箭头函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//this问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this指向'</span>,<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">  arr.map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">//这里面this执行windows  因为他是匿名函数 匿名函数默认指向windows</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123;<span class="attr">a</span>:<span class="number">100</span>&#125;);</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].map(<span class="function"><span class="params">item</span> =&gt;</span> item); <span class="comment">//假如只有一行代码,并且是返回 那么函数就会自动return</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">  <span class="built_in">console</span>.log(index)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//this问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this指向'</span>,<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">  arr.map(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">//箭头函数this指向上一级 上一级this是call过来的&#123;a:100&#125;,解决了循环遍历里面的匿名函数this指向windows的问题</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123;<span class="attr">a</span>:<span class="number">100</span>&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6-总结-技巧&quot;&gt;&lt;a href=&quot;#ES6-总结-技巧&quot; class=&quot;headerlink&quot; title=&quot;ES6 总结 技巧&quot;&gt;&lt;/a&gt;ES6 总结 技巧&lt;/h1&gt;&lt;h2 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>mysql思维导图</title>
    <link href="http://yoursite.com/2018/08/05/mysql%20%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/08/05/mysql 思维导图/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T09:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://on7r0tqgu.bkt.clouddn.com/FupqmoAA1lwf_kL2HozhZ_M7bh8T.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://on7r0tqgu.bkt.clouddn.com/FupqmoAA1lwf_kL2HozhZ_M7bh8T.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql使用指南 - 进阶篇</title>
    <link href="http://yoursite.com/2018/08/05/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8C%87%E5%8D%97%20-%20%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <id>http://yoursite.com/2018/08/05/mysql数据库指南 - 进阶篇/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2018-08-05T09:34:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><blockquote><p>备份数据库内容 并不是备份数据库</p></blockquote><h4 id="在Navicat-Premium里面"><a href="#在Navicat-Premium里面" class="headerlink" title="在Navicat Premium里面"></a>在Navicat Premium里面</h4><p>直接双击数据库 右击数据库点击-&gt; 转储sql文件 即可保存</p><h4 id="在命令行里面"><a href="#在命令行里面" class="headerlink" title="在命令行里面"></a>在命令行里面</h4><blockquote><p>将root用户的base表到导出到a盘名为a.sql的为文件里面</p><p>注意: 登录状态下无法进行操作!</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p000000 base&gt;A:/a.sql</span><br></pre></td></tr></table></figure><blockquote><p>mysqldump: [Warning] Using a password on the command line interface can be insecure.</p><p>可能出现这句话 这是警告说 在命令行使用密码不安全,可以忽略</p></blockquote><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><h5 id="没有登录的状态下"><a href="#没有登录的状态下" class="headerlink" title="没有登录的状态下"></a>没有登录的状态下</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p000000 base&lt;A:/a.sql</span><br></pre></td></tr></table></figure><h5 id="登录状态下"><a href="#登录状态下" class="headerlink" title="登录状态下"></a>登录状态下</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> base;</span><br><span class="line"><span class="keyword">use</span> base;</span><br><span class="line">source a:/a.sql;  //即为导入</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p>主键约束: 唯一标识 <strong>非空</strong> <strong>唯一</strong> <strong>被引用</strong></p><p>当表的每一列被指定为主键的时候,该列不可以为空,不可以出现唯一的值</p><h4 id="创建表指定主键"><a href="#创建表指定主键" class="headerlink" title="创建表指定主键"></a>创建表指定主键</h4><h5 id="指定主键-方式1"><a href="#指定主键-方式1" class="headerlink" title="指定主键 - 方式1"></a>指定主键 - 方式1</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">empno <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">ename <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="指定主键-方式2"><a href="#指定主键-方式2" class="headerlink" title="指定主键 - 方式2"></a>指定主键 - 方式2</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">    empno <span class="built_in">int</span>,</span><br><span class="line">    ename <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    primary <span class="keyword">key</span>(empno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>这个错误就是主键出现了重复的意思</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1062 (23000): Duplicate entry &apos;x&apos; for key &apos;PRIMARY&apos;</span><br></pre></td></tr></table></figure><h5 id="修改表时指定主键"><a href="#修改表时指定主键" class="headerlink" title="修改表时指定主键"></a>修改表时指定主键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table emp (</span><br><span class="line">    empno int,</span><br><span class="line">    ename varchar(50)</span><br><span class="line">);</span><br><span class="line">alter table emp add primary key(empno);</span><br></pre></td></tr></table></figure><h4 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure><h4 id="主键自增长"><a href="#主键自增长" class="headerlink" title="主键自增长"></a>主键自增长</h4><blockquote><p>auto_increment 类型必须int</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu (</span><br><span class="line">    <span class="keyword">sid</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    sname <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'haha'</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><blockquote><p>not null</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table stu (</span><br><span class="line">    sid int primary key auto_increment,</span><br><span class="line">    sname varchar(50) not null,</span><br><span class="line">    age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><blockquote><p>unique</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table stu (</span><br><span class="line">    sid int primary key auto_increment,</span><br><span class="line">    sname varchar(50) not null unique,</span><br><span class="line">    age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><h4 id="创建表添加外键约束"><a href="#创建表添加外键约束" class="headerlink" title="创建表添加外键约束"></a>创建表添加外键约束</h4><blockquote><p>外键必须是每一个表的主键的值(外键要引用主键)</p><p>外键可以重复</p><p>外键可以为空</p><p>一张表可以有多个外键</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//创建主表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept (</span><br><span class="line">deptno <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">dname <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">)<span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line">//创建从表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">empno <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">ename <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">don <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">constraint</span> wj_emp_dept foreign <span class="keyword">key</span>(don) <span class="keyword">references</span> dept(deptno)</span><br><span class="line">//约束 xxx(外键名称) 外键(don) 引用  dept表的deptno列</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="已创建的表添加外键约束"><a href="#已创建的表添加外键约束" class="headerlink" title="已创建的表添加外键约束"></a>已创建的表添加外键约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">empno <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">ename <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">don <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> wj_emp_dept foreign <span class="keyword">key</span>(don) <span class="keyword">references</span> dept(deptno);</span><br><span class="line">改变 表 emp 添加 约束 (外键名称) 外键(don) 引用 dept表的deptno字段</span><br></pre></td></tr></table></figure><h4 id="已创建的表删除外键约束"><a href="#已创建的表删除外键约束" class="headerlink" title="已创建的表删除外键约束"></a>已创建的表删除外键约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> foreign <span class="keyword">key</span> wj_emp_dept;</span><br></pre></td></tr></table></figure><h3 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//主表</span><br><span class="line">create table hasband (</span><br><span class="line">hid int primary key auto_increment,</span><br><span class="line">hname varchar(50)</span><br><span class="line">) default charset=utf8;</span><br><span class="line">//从表</span><br><span class="line">create table wife(</span><br><span class="line">wid int primary key auto_increment,</span><br><span class="line">wname varchar(50),</span><br><span class="line">constraint fk_wife_hasband foreign key(wid) references hasband(hid)</span><br><span class="line">) default charset=utf8;</span><br><span class="line">//这里的wid即是主键也是外键 一对一的关键</span><br><span class="line">/*</span><br><span class="line">1. 非空</span><br><span class="line">2. 唯一</span><br><span class="line">3. 引用hid</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//创建主表</span><br><span class="line">create table student(</span><br><span class="line">sid int primary key auto_increment,</span><br><span class="line">sname varchar(50)</span><br><span class="line">);</span><br><span class="line">create table teacher(</span><br><span class="line">tid int primary key auto_increment,</span><br><span class="line">tname varchar(50)</span><br><span class="line">);</span><br><span class="line">//管理表</span><br><span class="line">create table stu_sea(</span><br><span class="line">sid int,</span><br><span class="line">tid int,</span><br><span class="line">constraint fk_student foreign key(sid) references student(sid),</span><br><span class="line">constraint fk_teacher foreign key(tid) references teacher(tid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>多对多 两个主表 在创建中间表 最后将关系都写在中间表里面</p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="合并结果集"><a href="#合并结果集" class="headerlink" title="合并结果集"></a>合并结果集</h3><blockquote><p>要求两个<strong>结果集</strong>(查询结果)完全相同</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">create table ab values(1,&apos;&apos;</span><br><span class="line">1)(;</span><br><span class="line">a int,</span><br><span class="line">b varchar(50)</span><br><span class="line">);</span><br><span class="line">insert into ab values(1,&apos;1&apos;);</span><br><span class="line">insert into ab values(2,&apos;2&apos;);</span><br><span class="line">insert into ab values(3,&apos;3&apos;);</span><br><span class="line">create table cd (</span><br><span class="line">c int,</span><br><span class="line">d varchar(50)</span><br><span class="line">);</span><br><span class="line">insert into cd values(3,&apos;3&apos;);</span><br><span class="line">insert into cd values(4,&apos;4&apos;);</span><br><span class="line">insert into cd values(5,&apos;5&apos;);</span><br><span class="line"></span><br><span class="line">//合并结果集 (表头由第一个查询的表定)</span><br><span class="line">select * from ab union all select * from cd;</span><br><span class="line">+------+------+</span><br><span class="line">| a    | b    |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | 1    |</span><br><span class="line">|    2 | 2    |</span><br><span class="line">|    3 | 3    |</span><br><span class="line">|    3 | 3    |</span><br><span class="line">|    4 | 4    |</span><br><span class="line">|    5 | 5    |</span><br><span class="line">+------+------+</span><br><span class="line">//不加all会将重复的过滤掉</span><br><span class="line">mysql&gt; select * from ab union select * from cd;</span><br><span class="line">+------+------+</span><br><span class="line">| a    | b    |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | 1    |</span><br><span class="line">|    2 | 2    |</span><br><span class="line">|    3 | 3    |</span><br><span class="line">|    4 | 4    |</span><br><span class="line">|    5 | 5    |</span><br><span class="line">+------+------+</span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="方言"><a href="#方言" class="headerlink" title="方言"></a>方言</h4><blockquote><p>格式: <strong>select * from 表1 as 别名1,表2 as 别名2 where 别名1.xx=别名2.xx</strong></p></blockquote><p>笛卡尔积</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp,dept; </span><br><span class="line">//会emp每一列与dept表连接</span><br></pre></td></tr></table></figure><blockquote><p>添加条件 去除不匹配数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp,dept where emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure><blockquote><p>打印指定数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select emp.ename,emp.sal,dept.dname from emp,dept where emp.deptno = dept.deptno;</span><br><span class="line">+<span class="comment">--------+----------+--------+</span></span><br><span class="line">| ename  | sal      | dname  |</span><br><span class="line">+<span class="comment">--------+----------+--------+</span></span><br><span class="line">| 甘宁   |  8000.00 | 学工部 |</span><br><span class="line">| 黛绮丝 | 16000.00 | 销售部 |</span><br><span class="line">| 殷天正 | 12500.00 | 销售部 |</span><br><span class="line">| 刘备   | 29750.00 | 学工部 |</span><br><span class="line">| 谢逊   | 12500.00 | 销售部 |</span><br><span class="line">| 关羽   | 28500.00 | 销售部 |</span><br><span class="line">| 张飞   | 24500.00 | 教研部 |</span><br><span class="line">| 诸葛亮 | 30000.00 | 学工部 |</span><br><span class="line">| 曾阿牛 | 50000.00 | 教研部 |</span><br><span class="line">| 韦一笑 | 15000.00 | 销售部 |</span><br><span class="line">| 周泰   | 11000.00 | 学工部 |</span><br><span class="line">| 程普   |  9500.00 | 销售部 |</span><br><span class="line">| 庞统   | 30000.00 | 学工部 |</span><br><span class="line">| 黄盖   | 13000.00 | 教研部 |</span><br><span class="line">+<span class="comment">--------+----------+--------+</span></span><br></pre></td></tr></table></figure><blockquote><p>给表起别名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename,e.sal,d.dname <span class="keyword">from</span> emp <span class="keyword">as</span> e,dept <span class="keyword">as</span> d <span class="keyword">where</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h4><blockquote><p>inner join</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename,e.sal,d.dname <span class="keyword">from</span> emp <span class="keyword">as</span> e <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">as</span> d <span class="keyword">on</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="自然"><a href="#自然" class="headerlink" title="自然"></a>自然</h4><blockquote><p> natural join 标准的简化写法 自动匹配相同的字段</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename,e.sal,d.dname <span class="keyword">from</span> emp <span class="keyword">as</span> e <span class="keyword">natural</span> <span class="keyword">join</span> dept d;</span><br></pre></td></tr></table></figure><h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><blockquote><p>外连接有一主一次 左外即左表为主</p><p>这里以emp表为主,name主表中所有记录都无论条件是否满足,都会打印出来</p><p>不满足条件会用null作为右表的补位</p></blockquote><h6 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename,e.sal,d.dname </span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">as</span> e <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d </span><br><span class="line"><span class="keyword">on</span> e.deptno=d.deptno;</span><br></pre></td></tr></table></figure><h6 id="右链接"><a href="#右链接" class="headerlink" title="右链接"></a>右链接</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.ename,e.sal,d.dname</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">as</span> e <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno=d.deptno;</span><br></pre></td></tr></table></figure><blockquote><p>假如决定null数据不合适可以使用ifnull去替换</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">ifnull</span>(e.ename,<span class="string">'无员工'</span>) ename,e.sal,d.dname <span class="keyword">from</span> emp <span class="keyword">as</span> e <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno=d.deptno;</span><br><span class="line">+<span class="comment">--------+----------+--------+</span></span><br><span class="line">| ename  | sal      | dname  |</span><br><span class="line">+<span class="comment">--------+----------+--------+</span></span><br><span class="line">| 甘宁   |  8000.00 | 学工部 |</span><br><span class="line">| 黛绮丝 | 16000.00 | 销售部 |</span><br><span class="line">| 殷天正 | 12500.00 | 销售部 |</span><br><span class="line">| 刘备   | 29750.00 | 学工部 |</span><br><span class="line">| 谢逊   | 12500.00 | 销售部 |</span><br><span class="line">| 关羽   | 28500.00 | 销售部 |</span><br><span class="line">| 张飞   | 24500.00 | 教研部 |</span><br><span class="line">| 诸葛亮 | 30000.00 | 学工部 |</span><br><span class="line">| 曾阿牛 | 50000.00 | 教研部 |</span><br><span class="line">| 韦一笑 | 15000.00 | 销售部 |</span><br><span class="line">| 周泰   | 11000.00 | 学工部 |</span><br><span class="line">| 程普   |  9500.00 | 销售部 |</span><br><span class="line">| 庞统   | 30000.00 | 学工部 |</span><br><span class="line">| 黄盖   | 13000.00 | 教研部 |</span><br><span class="line">| 无员工 |     NULL | 财务部 |</span><br><span class="line">+<span class="comment">--------+----------+--------+</span></span><br></pre></td></tr></table></figure><h6 id="全连接"><a href="#全连接" class="headerlink" title="全连接"></a>全连接</h6><blockquote><p>使用关键字 union合并结果集</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select e.ename,e.sal,d.dname </span><br><span class="line">from emp as e left outer join dept d </span><br><span class="line">on e.deptno=d.deptno</span><br><span class="line">union</span><br><span class="line">select e.ename,e.sal,d.dname</span><br><span class="line">from emp as e right outer join dept d</span><br><span class="line">on e.deptno=d.deptno;</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>查询sal字段最高的行的详细信息</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emp where sal=(select max(sal) from emp);</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+</span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM | deptno |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+</span></span><br><span class="line">|  1009 | 曾阿牛 | 董事长 | NULL | 2001-11-17 | 50000.00 | NULL |     10 |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+</span></span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*创建部门表*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</span><br><span class="line">deptno<span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">dname<span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">loc <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">) <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建雇员表*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">empno<span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">ename<span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">job<span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">mgr<span class="built_in">INT</span>,</span><br><span class="line">hiredate<span class="built_in">DATE</span>,</span><br><span class="line">sal<span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">COMM <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">deptno<span class="built_in">INT</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_emp FOREIGN <span class="keyword">KEY</span>(mgr) <span class="keyword">REFERENCES</span> emp(empno)</span><br><span class="line">) <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建工资等级表*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> salgrade(</span><br><span class="line">grade<span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">losal<span class="built_in">INT</span>,</span><br><span class="line">hisal<span class="built_in">INT</span></span><br><span class="line">) <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"><span class="comment">/*插入dept表数据*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">'教研部'</span>, <span class="string">'北京'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">20</span>, <span class="string">'学工部'</span>, <span class="string">'上海'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">30</span>, <span class="string">'销售部'</span>, <span class="string">'广州'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span> (<span class="number">40</span>, <span class="string">'财务部'</span>, <span class="string">'武汉'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入emp表数据*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1009</span>, <span class="string">'曾阿牛'</span>, <span class="string">'董事长'</span>, <span class="literal">NULL</span>, <span class="string">'2001-11-17'</span>, <span class="number">50000</span>, <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1004</span>, <span class="string">'刘备'</span>, <span class="string">'经理'</span>, <span class="number">1009</span>, <span class="string">'2001-04-02'</span>, <span class="number">29750</span>, <span class="literal">NULL</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1006</span>, <span class="string">'关羽'</span>, <span class="string">'经理'</span>, <span class="number">1009</span>, <span class="string">'2001-05-01'</span>, <span class="number">28500</span>, <span class="literal">NULL</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1007</span>, <span class="string">'张飞'</span>, <span class="string">'经理'</span>, <span class="number">1009</span>, <span class="string">'2001-09-01'</span>, <span class="number">24500</span>, <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1008</span>, <span class="string">'诸葛亮'</span>, <span class="string">'分析师'</span>, <span class="number">1004</span>, <span class="string">'2007-04-19'</span>, <span class="number">30000</span>, <span class="literal">NULL</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1013</span>, <span class="string">'庞统'</span>, <span class="string">'分析师'</span>, <span class="number">1004</span>, <span class="string">'2001-12-03'</span>, <span class="number">30000</span>, <span class="literal">NULL</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1002</span>, <span class="string">'黛绮丝'</span>, <span class="string">'销售员'</span>, <span class="number">1006</span>, <span class="string">'2001-02-20'</span>, <span class="number">16000</span>, <span class="number">3000</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1003</span>, <span class="string">'殷天正'</span>, <span class="string">'销售员'</span>, <span class="number">1006</span>, <span class="string">'2001-02-22'</span>, <span class="number">12500</span>, <span class="number">5000</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1005</span>, <span class="string">'谢逊'</span>, <span class="string">'销售员'</span>, <span class="number">1006</span>, <span class="string">'2001-09-28'</span>, <span class="number">12500</span>, <span class="number">14000</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1010</span>, <span class="string">'韦一笑'</span>, <span class="string">'销售员'</span>, <span class="number">1006</span>, <span class="string">'2001-09-08'</span>, <span class="number">15000</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1012</span>, <span class="string">'程普'</span>, <span class="string">'文员'</span>, <span class="number">1006</span>, <span class="string">'2001-12-03'</span>, <span class="number">9500</span>, <span class="literal">NULL</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1014</span>, <span class="string">'黄盖'</span>, <span class="string">'文员'</span>, <span class="number">1007</span>, <span class="string">'2002-01-23'</span>, <span class="number">13000</span>, <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1011</span>, <span class="string">'周泰'</span>, <span class="string">'文员'</span>, <span class="number">1008</span>, <span class="string">'2007-05-23'</span>, <span class="number">11000</span>, <span class="literal">NULL</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">1001</span>, <span class="string">'甘宁'</span>, <span class="string">'文员'</span>, <span class="number">1013</span>, <span class="string">'2000-12-17'</span>, <span class="number">8000</span>, <span class="literal">NULL</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入salgrade表数据*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">7000</span>, <span class="number">12000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">12010</span>, <span class="number">14000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">14010</span>, <span class="number">20000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">20010</span>, <span class="number">30000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">30010</span>, <span class="number">99990</span>);</span><br></pre></td></tr></table></figure><h5 id="查询至少有一个员工的部门-显示部门编号-部门名称-部门位置-部门人数"><a href="#查询至少有一个员工的部门-显示部门编号-部门名称-部门位置-部门人数" class="headerlink" title="查询至少有一个员工的部门,显示部门编号,部门名称,部门位置,部门人数"></a>查询至少有一个员工的部门,显示部门编号,部门名称,部门位置,部门人数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> d.*,z1.cou</span><br><span class="line"><span class="keyword">from</span> dept d,(<span class="keyword">select</span> deptno,<span class="keyword">count</span>(*) cou <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) z1  //笛卡尔积</span><br><span class="line"><span class="keyword">where</span> d.deptno=z1.deptno;</span><br></pre></td></tr></table></figure><h5 id="列出所有员工的姓名及其直接上司的名字"><a href="#列出所有员工的姓名及其直接上司的名字" class="headerlink" title="列出所有员工的姓名及其直接上司的名字"></a>列出所有员工的姓名及其直接上司的名字</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//首先使用笛卡尔积来统一匹配</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp e,emp p;</span><br><span class="line">在去把员工的上司编号与上司编号去匹配 加个别名</span><br><span class="line"><span class="keyword">select</span> e.ename <span class="keyword">as</span> <span class="string">'上司'</span>,p.ename <span class="keyword">as</span> <span class="string">'员工'</span> <span class="keyword">from</span> emp e,emp p <span class="keyword">where</span> e.empno=p.mgr;</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br><span class="line">| 上司   | 员工   |</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br><span class="line">| 庞统   | 甘宁   |</span><br><span class="line">| 关羽   | 黛绮丝 |</span><br><span class="line">| 关羽   | 殷天正 |</span><br><span class="line">| 曾阿牛 | 刘备   |</span><br><span class="line">| 关羽   | 谢逊   |</span><br><span class="line">| 曾阿牛 | 关羽   |</span><br><span class="line">| 曾阿牛 | 张飞   |</span><br><span class="line">| 刘备   | 诸葛亮 |</span><br><span class="line">| 关羽   | 韦一笑 |</span><br><span class="line">| 诸葛亮 | 周泰   |</span><br><span class="line">| 关羽   | 程普   |</span><br><span class="line">| 刘备   | 庞统   |</span><br><span class="line">| 张飞   | 黄盖   |</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br></pre></td></tr></table></figure><h5 id="列出受雇日期早于直接上级的所有员工及编号-姓名-部门"><a href="#列出受雇日期早于直接上级的所有员工及编号-姓名-部门" class="headerlink" title="列出受雇日期早于直接上级的所有员工及编号.姓名,部门"></a>列出受雇日期早于直接上级的所有员工及编号.姓名,部门</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//首先 列出所有员工受雇时间,员工编号 和领导受雇时间</span><br><span class="line"><span class="keyword">select</span> e.empno,e.ename,e.hiredate,p.ename,p.hiredate <span class="keyword">from</span> emp e,emp p <span class="keyword">where</span> e.mgr=p.empno;</span><br><span class="line">+<span class="comment">-------+--------+------------+--------+------------+</span></span><br><span class="line">| empno | ename  | hiredate   | ename  | hiredate   |</span><br><span class="line">+<span class="comment">-------+--------+------------+--------+------------+</span></span><br><span class="line">|  1001 | 甘宁   | 2000-12-17 | 庞统   | 2001-12-03 |</span><br><span class="line">|  1002 | 黛绮丝 | 2001-02-20 | 关羽   | 2001-05-01 |</span><br><span class="line">|  1003 | 殷天正 | 2001-02-22 | 关羽   | 2001-05-01 |</span><br><span class="line">|  1004 | 刘备   | 2001-04-02 | 曾阿牛 | 2001-11-17 |</span><br><span class="line">|  1005 | 谢逊   | 2001-09-28 | 关羽   | 2001-05-01 |</span><br><span class="line">|  1006 | 关羽   | 2001-05-01 | 曾阿牛 | 2001-11-17 |</span><br><span class="line">|  1007 | 张飞   | 2001-09-01 | 曾阿牛 | 2001-11-17 |</span><br><span class="line">|  1008 | 诸葛亮 | 2007-04-19 | 刘备   | 2001-04-02 |</span><br><span class="line">|  1010 | 韦一笑 | 2001-09-08 | 关羽   | 2001-05-01 |</span><br><span class="line">|  1011 | 周泰   | 2007-05-23 | 诸葛亮 | 2007-04-19 |</span><br><span class="line">|  1012 | 程普   | 2001-12-03 | 关羽   | 2001-05-01 |</span><br><span class="line">|  1013 | 庞统   | 2001-12-03 | 刘备   | 2001-04-02 |</span><br><span class="line">|  1014 | 黄盖   | 2002-01-23 | 张飞   | 2001-09-01 |</span><br><span class="line">+<span class="comment">-------+--------+------------+--------+------------+</span></span><br><span class="line">//将受雇时间早于上级的过滤下来</span><br><span class="line"><span class="keyword">select</span> e.empno,e.ename,e.hiredate,p.ename,p.hiredate <span class="keyword">from</span> emp e,emp p <span class="keyword">where</span> e.mgr=p.empno <span class="keyword">and</span> e.hiredate&lt;p.hiredate;</span><br><span class="line">+<span class="comment">-------+--------+------------+--------+------------+</span></span><br><span class="line">| empno | ename  | hiredate   | ename  | hiredate   |</span><br><span class="line">+<span class="comment">-------+--------+------------+--------+------------+</span></span><br><span class="line">|  1001 | 甘宁   | 2000-12-17 | 庞统   | 2001-12-03 |</span><br><span class="line">|  1002 | 黛绮丝 | 2001-02-20 | 关羽   | 2001-05-01 |</span><br><span class="line">|  1003 | 殷天正 | 2001-02-22 | 关羽   | 2001-05-01 |</span><br><span class="line">|  1004 | 刘备   | 2001-04-02 | 曾阿牛 | 2001-11-17 |</span><br><span class="line">|  1006 | 关羽   | 2001-05-01 | 曾阿牛 | 2001-11-17 |</span><br><span class="line">|  1007 | 张飞   | 2001-09-01 | 曾阿牛 | 2001-11-17 |</span><br><span class="line">+<span class="comment">-------+--------+------------+--------+------------+</span></span><br><span class="line">//最后获取部门名称  判断人员表的部门号与部门表的部门号匹配即可 把没用的去掉</span><br><span class="line">mysql&gt; select e.empno '编号',e.ename '员工',d.dname '部门' from emp e,emp p,dept d whe</span><br><span class="line">re e.mgr=p.empno and e.hiredate&lt;p.hiredate and e.deptno=d.deptno;</span><br><span class="line">+<span class="comment">------+--------+--------+</span></span><br><span class="line">| 编号 | 员工   | 部门   |</span><br><span class="line">+<span class="comment">------+--------+--------+</span></span><br><span class="line">| 1001 | 甘宁   | 学工部 |</span><br><span class="line">| 1002 | 黛绮丝 | 销售部 |</span><br><span class="line">| 1003 | 殷天正 | 销售部 |</span><br><span class="line">| 1004 | 刘备   | 学工部 |</span><br><span class="line">| 1006 | 关羽   | 销售部 |</span><br><span class="line">| 1007 | 张飞   | 教研部 |</span><br><span class="line">+<span class="comment">------+--------+--------+</span></span><br></pre></td></tr></table></figure><h5 id="列出部门名称和这些部门的员工信息-同时列出没有员工的部门"><a href="#列出部门名称和这些部门的员工信息-同时列出没有员工的部门" class="headerlink" title="列出部门名称和这些部门的员工信息 同时列出没有员工的部门"></a>列出部门名称和这些部门的员工信息 同时列出没有员工的部门</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//首先获取员工信息对应的部门名称</span><br><span class="line">mysql&gt; select e.*,d.dname from dept d,emp e where e.deptno=d.deptno;</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+----------+--------+--------+</span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM     | deptno | dname  |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+----------+--------+--------+</span></span><br><span class="line">|  1001 | 甘宁   | 文员   | 1013 | 2000-12-17 |  8000.00 |     NULL |     20 | 学工部 |</span><br><span class="line">|  1002 | 黛绮丝 | 销售员 | 1006 | 2001-02-20 | 16000.00 |  3000.00 |     30 | 销售部 |</span><br><span class="line">|  1003 | 殷天正 | 销售员 | 1006 | 2001-02-22 | 12500.00 |  5000.00 |     30 | 销售部 |</span><br><span class="line">|  1004 | 刘备   | 经理   | 1009 | 2001-04-02 | 29750.00 |     NULL |     20 | 学工部 |</span><br><span class="line">|  1005 | 谢逊   | 销售员 | 1006 | 2001-09-28 | 12500.00 | 14000.00 |     30 | 销售部 |</span><br><span class="line">|  1006 | 关羽   | 经理   | 1009 | 2001-05-01 | 28500.00 |     NULL |     30 | 销售部 |</span><br><span class="line">|  1007 | 张飞   | 经理   | 1009 | 2001-09-01 | 24500.00 |     NULL |     10 | 教研部 |</span><br><span class="line">|  1008 | 诸葛亮 | 分析师 | 1004 | 2007-04-19 | 30000.00 |     NULL |     20 | 学工部 |</span><br><span class="line">|  1009 | 曾阿牛 | 董事长 | NULL | 2001-11-17 | 50000.00 |     NULL |     10 | 教研部 |</span><br><span class="line">|  1010 | 韦一笑 | 销售员 | 1006 | 2001-09-08 | 15000.00 |     0.00 |     30 | 销售部 |</span><br><span class="line">|  1011 | 周泰   | 文员   | 1008 | 2007-05-23 | 11000.00 |     NULL |     20 | 学工部 |</span><br><span class="line">|  1012 | 程普   | 文员   | 1006 | 2001-12-03 |  9500.00 |     NULL |     30 | 销售部 |</span><br><span class="line">|  1013 | 庞统   | 分析师 | 1004 | 2001-12-03 | 30000.00 |     NULL |     20 | 学工部 |</span><br><span class="line">|  1014 | 黄盖   | 文员   | 1007 | 2002-01-23 | 13000.00 |     NULL |     10 | 教研部 |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+----------+--------+--------+</span></span><br><span class="line">//这里要求没用员工的部门也列出来,随意要使用右连接</span><br><span class="line">mysql&gt; select e.*,d.dname from emp e right outer join dept d on e.deptno=d.deptno;</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+----------+--------+--------+</span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM     | deptno | dname  |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+----------+--------+--------+</span></span><br><span class="line">|  1001 | 甘宁   | 文员   | 1013 | 2000-12-17 |  8000.00 |     NULL |     20 | 学工部 |</span><br><span class="line">|  1002 | 黛绮丝 | 销售员 | 1006 | 2001-02-20 | 16000.00 |  3000.00 |     30 | 销售部 |</span><br><span class="line">|  1003 | 殷天正 | 销售员 | 1006 | 2001-02-22 | 12500.00 |  5000.00 |     30 | 销售部 |</span><br><span class="line">|  1004 | 刘备   | 经理   | 1009 | 2001-04-02 | 29750.00 |     NULL |     20 | 学工部 |</span><br><span class="line">|  1005 | 谢逊   | 销售员 | 1006 | 2001-09-28 | 12500.00 | 14000.00 |     30 | 销售部 |</span><br><span class="line">|  1006 | 关羽   | 经理   | 1009 | 2001-05-01 | 28500.00 |     NULL |     30 | 销售部 |</span><br><span class="line">|  1007 | 张飞   | 经理   | 1009 | 2001-09-01 | 24500.00 |     NULL |     10 | 教研部 |</span><br><span class="line">|  1008 | 诸葛亮 | 分析师 | 1004 | 2007-04-19 | 30000.00 |     NULL |     20 | 学工部 |</span><br><span class="line">|  1009 | 曾阿牛 | 董事长 | NULL | 2001-11-17 | 50000.00 |     NULL |     10 | 教研部 |</span><br><span class="line">|  1010 | 韦一笑 | 销售员 | 1006 | 2001-09-08 | 15000.00 |     0.00 |     30 | 销售部 |</span><br><span class="line">|  1011 | 周泰   | 文员   | 1008 | 2007-05-23 | 11000.00 |     NULL |     20 | 学工部 |</span><br><span class="line">|  1012 | 程普   | 文员   | 1006 | 2001-12-03 |  9500.00 |     NULL |     30 | 销售部 |</span><br><span class="line">|  1013 | 庞统   | 分析师 | 1004 | 2001-12-03 | 30000.00 |     NULL |     20 | 学工部 |</span><br><span class="line">|  1014 | 黄盖   | 文员   | 1007 | 2002-01-23 | 13000.00 |     NULL |     10 | 教研部 |</span><br><span class="line">|  NULL | NULL   | NULL   | NULL | NULL       |     NULL |     NULL |   NULL | 财务部 |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+----------+--------+--------+</span></span><br></pre></td></tr></table></figure><h5 id="列出薪资大于15000的各种工作以及从事此工作的员工人数"><a href="#列出薪资大于15000的各种工作以及从事此工作的员工人数" class="headerlink" title="列出薪资大于15000的各种工作以及从事此工作的员工人数"></a>列出薪资大于15000的各种工作以及从事此工作的员工人数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//首先获取各种工作</span><br><span class="line"><span class="keyword">select</span> job,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">| job    | count(*) |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">| 分析师 |        2 |</span><br><span class="line">| 文员   |        4 |</span><br><span class="line">| 经理   |        3 |</span><br><span class="line">| 董事长 |        1 |</span><br><span class="line">| 销售员 |        4 |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">这里列出薪资大于15000,是对分组后的人进行条件查询,所以使用having</span><br><span class="line"><span class="keyword">select</span> job,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job <span class="keyword">having</span> <span class="keyword">min</span>(sal) &gt;<span class="number">15000</span>;</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">| job    | count(*) |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">| 分析师 |        2 |</span><br><span class="line">| 经理   |        3 |</span><br><span class="line">| 董事长 |        1 |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br></pre></td></tr></table></figure><h5 id="列出在销售部工作的员工姓名-不能通过员工编号获取"><a href="#列出在销售部工作的员工姓名-不能通过员工编号获取" class="headerlink" title="列出在销售部工作的员工姓名,不能通过员工编号获取"></a>列出在销售部工作的员工姓名,不能通过员工编号获取</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//假设知道员工编号</span><br><span class="line">mysql&gt; select ename,deptno from emp where deptno='30';</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br><span class="line">| ename  | deptno |</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br><span class="line">| 黛绮丝 |     30 |</span><br><span class="line">| 殷天正 |     30 |</span><br><span class="line">| 谢逊   |     30 |</span><br><span class="line">| 关羽   |     30 |</span><br><span class="line">| 韦一笑 |     30 |</span><br><span class="line">| 程普   |     30 |</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br><span class="line">//这里通过子查询去dept表获取销售部的编号</span><br><span class="line">mysql&gt; select ename from emp where deptno=(select deptno from dept where dname='销售部');</span><br><span class="line">+<span class="comment">--------+ </span></span><br><span class="line">| ename  | </span><br><span class="line">+<span class="comment">--------+ </span></span><br><span class="line">| 黛绮丝 |    </span><br><span class="line">| 殷天正 |    </span><br><span class="line">| 谢逊   |   </span><br><span class="line">| 关羽   |   </span><br><span class="line">| 韦一笑 |    </span><br><span class="line">| 程普   |   </span><br><span class="line">+<span class="comment">--------+</span></span><br></pre></td></tr></table></figure><h5 id="列出薪资高于平均薪资的员工信息-所在部门-上级领导-工资等级"><a href="#列出薪资高于平均薪资的员工信息-所在部门-上级领导-工资等级" class="headerlink" title="列出薪资高于平均薪资的员工信息,所在部门,上级领导,工资等级"></a>列出薪资高于平均薪资的员工信息,所在部门,上级领导,工资等级</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">//首先查出高于平均工资的</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt;(<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp);</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+</span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM | deptno |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+</span></span><br><span class="line">|  1004 | 刘备   | 经理   | 1009 | 2001-04-02 | 29750.00 | NULL |     20 |</span><br><span class="line">|  1006 | 关羽   | 经理   | 1009 | 2001-05-01 | 28500.00 | NULL |     30 |</span><br><span class="line">|  1007 | 张飞   | 经理   | 1009 | 2001-09-01 | 24500.00 | NULL |     10 |</span><br><span class="line">|  1008 | 诸葛亮 | 分析师 | 1004 | 2007-04-19 | 30000.00 | NULL |     20 |</span><br><span class="line">|  1009 | 曾阿牛 | 董事长 | NULL | 2001-11-17 | 50000.00 | NULL |     10 |</span><br><span class="line">|  1013 | 庞统   | 分析师 | 1004 | 2001-12-03 | 30000.00 | NULL |     20 |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+</span></span><br><span class="line">//加上部门名称</span><br><span class="line"><span class="keyword">select</span> e.*,d.dname </span><br><span class="line"><span class="keyword">from</span> emp e,dept d </span><br><span class="line"><span class="keyword">where</span> sal&gt;(<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp) <span class="keyword">and</span> e.deptno=d.deptno;</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+</span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM | deptno | dname  |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+</span></span><br><span class="line">|  1004 | 刘备   | 经理   | 1009 | 2001-04-02 | 29750.00 | NULL |     20 | 学工部 |</span><br><span class="line">|  1006 | 关羽   | 经理   | 1009 | 2001-05-01 | 28500.00 | NULL |     30 | 销售部 |</span><br><span class="line">|  1007 | 张飞   | 经理   | 1009 | 2001-09-01 | 24500.00 | NULL |     10 | 教研部 |</span><br><span class="line">|  1008 | 诸葛亮 | 分析师 | 1004 | 2007-04-19 | 30000.00 | NULL |     20 | 学工部 |</span><br><span class="line">|  1009 | 曾阿牛 | 董事长 | NULL | 2001-11-17 | 50000.00 | NULL |     10 | 教研部 |</span><br><span class="line">|  1013 | 庞统   | 分析师 | 1004 | 2001-12-03 | 30000.00 | NULL |     20 | 学工部 |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+</span></span><br><span class="line">//加上级领导</span><br><span class="line"><span class="keyword">select</span> e.*,d.dname,p.ename</span><br><span class="line"><span class="keyword">from</span> emp e,dept d,emp p</span><br><span class="line"><span class="keyword">where</span> e.sal&gt;(<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp) <span class="keyword">and</span> e.deptno=d.deptno <span class="keyword">and</span> e.mgr=p.empno;</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+--------+</span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM | deptno | dname  | ename  |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+--------+</span></span><br><span class="line">|  1004 | 刘备   | 经理   | 1009 | 2001-04-02 | 29750.00 | NULL |     20 | 学工部 | 曾阿牛 |</span><br><span class="line">|  1006 | 关羽   | 经理   | 1009 | 2001-05-01 | 28500.00 | NULL |     30 | 销售部 | 曾阿牛 |</span><br><span class="line">|  1007 | 张飞   | 经理   | 1009 | 2001-09-01 | 24500.00 | NULL |     10 | 教研部 | 曾阿牛 |</span><br><span class="line">|  1008 | 诸葛亮 | 分析师 | 1004 | 2007-04-19 | 30000.00 | NULL |     20 | 学工部 | 刘备   |</span><br><span class="line">|  1013 | 庞统   | 分析师 | 1004 | 2001-12-03 | 30000.00 | NULL |     20 | 学工部 | 刘备   |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+--------+</span></span><br><span class="line">//加薪资等级</span><br><span class="line"><span class="keyword">select</span> e.*,d.dname,p.ename,s.grade <span class="string">'薪资等级'</span></span><br><span class="line"><span class="keyword">from</span> emp e,dept d,emp p,salgrade s</span><br><span class="line"><span class="keyword">where</span> e.sal&gt;(<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp) <span class="keyword">and</span> e.deptno=d.deptno <span class="keyword">and</span> e.mgr=p.empno <span class="keyword">and</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+--------+----------+</span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM | deptno | dname  | ename  | 薪资等级 |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+--------+----------+</span></span><br><span class="line">|  1004 | 刘备   | 经理   | 1009 | 2001-04-02 | 29750.00 | NULL |     20 | 学工部 | 曾阿牛 |        4 |</span><br><span class="line">|  1006 | 关羽   | 经理   | 1009 | 2001-05-01 | 28500.00 | NULL |     30 | 销售部 | 曾阿牛 |        4 |</span><br><span class="line">|  1007 | 张飞   | 经理   | 1009 | 2001-09-01 | 24500.00 | NULL |     10 | 教研部 | 曾阿牛 |        4 |</span><br><span class="line">|  1008 | 诸葛亮 | 分析师 | 1004 | 2007-04-19 | 30000.00 | NULL |     20 | 学工部 | 刘备   |        4 |</span><br><span class="line">|  1013 | 庞统   | 分析师 | 1004 | 2001-12-03 | 30000.00 | NULL |     20 | 学工部 | 刘备   |        4 |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+--------+----------+</span></span><br><span class="line">//最后把高于平均薪资的员工信息,但是因为上级领导被过滤掉的通过左连接显示出来</span><br><span class="line"><span class="keyword">select</span> e.*,d.dname,p.ename,s.grade <span class="string">'薪资等级'</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno=d.deptno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp p <span class="keyword">on</span> e.mgr=p.empno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> salgrade s <span class="keyword">on</span> e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">where</span> e.sal&gt;(<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">from</span> emp);</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+--------+----------+</span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM | deptno | dname  | ename  | 薪资等级 |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+--------+----------+</span></span><br><span class="line">|  1007 | 张飞   | 经理   | 1009 | 2001-09-01 | 24500.00 | NULL |     10 | 教研部 | 曾阿牛 |        4 |</span><br><span class="line">|  1004 | 刘备   | 经理   | 1009 | 2001-04-02 | 29750.00 | NULL |     20 | 学工部 | 曾阿牛 |        4 |</span><br><span class="line">|  1008 | 诸葛亮 | 分析师 | 1004 | 2007-04-19 | 30000.00 | NULL |     20 | 学工部 | 刘备   |        4 |</span><br><span class="line">|  1013 | 庞统   | 分析师 | 1004 | 2001-12-03 | 30000.00 | NULL |     20 | 学工部 | 刘备   |        4 |</span><br><span class="line">|  1006 | 关羽   | 经理   | 1009 | 2001-05-01 | 28500.00 | NULL |     30 | 销售部 | 曾阿牛 |        4 |</span><br><span class="line">|  1009 | 曾阿牛 | 董事长 | NULL | 2001-11-17 | 50000.00 | NULL |     10 | 教研部 | NULL   |        5 |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+--------+----------+</span></span><br></pre></td></tr></table></figure><h5 id="列出与庞统从事相同工作的所有员工及部门名称"><a href="#列出与庞统从事相同工作的所有员工及部门名称" class="headerlink" title="列出与庞统从事相同工作的所有员工及部门名称"></a>列出与庞统从事相同工作的所有员工及部门名称</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//首先获取与庞统从事相同工作的所有员工</span><br><span class="line">mysql&gt; select * from emp  where job=(select job from emp where ename='庞统');</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+</span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM | deptno |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+</span></span><br><span class="line">|  1008 | 诸葛亮 | 分析师 | 1004 | 2007-04-19 | 30000.00 | NULL |     20  |</span><br><span class="line">|  1013 | 庞统   | 分析师 | 1004 | 2001-12-03 | 30000.00 | NULL |     20  |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+</span></span><br><span class="line">//查询部门</span><br><span class="line"><span class="keyword">select</span> e.*,d.dname <span class="keyword">from</span> emp e,dept d <span class="keyword">where</span> job=(<span class="keyword">select</span> job <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'庞统'</span>) <span class="keyword">and</span> e.deptno=d.deptno;</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+</span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM | deptno | dname  |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+</span></span><br><span class="line">|  1008 | 诸葛亮 | 分析师 | 1004 | 2007-04-19 | 30000.00 | NULL |     20 | 学工部 |</span><br><span class="line">|  1013 | 庞统   | 分析师 | 1004 | 2001-12-03 | 30000.00 | NULL |     20 | 学工部 |</span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+------+--------+--------+</span></span><br></pre></td></tr></table></figure><h5 id="列出薪资高于30部门的所有员工的姓名-薪资-部门名称"><a href="#列出薪资高于30部门的所有员工的姓名-薪资-部门名称" class="headerlink" title="列出薪资高于30部门的所有员工的姓名,薪资,部门名称"></a>列出薪资高于30部门的所有员工的姓名,薪资,部门名称</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select e.ename,e.sal,d.dname from emp e,dept d where e.deptno=d.deptno and sal&gt; (select max(sal) from emp where deptno='30');</span><br><span class="line">+<span class="comment">--------+----------+--------+</span></span><br><span class="line">| ename  | sal      | dname  |</span><br><span class="line">+<span class="comment">--------+----------+--------+</span></span><br><span class="line">| 刘备   | 29750.00 | 学工部 |</span><br><span class="line">| 诸葛亮 | 30000.00 | 学工部 |</span><br><span class="line">| 曾阿牛 | 50000.00 | 教研部 |</span><br><span class="line">| 庞统   | 30000.00 | 学工部 |</span><br><span class="line">+<span class="comment">--------+----------+--------+</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;备份与恢复&quot;&gt;&lt;a href=&quot;#备份与恢复&quot; class=&quot;headerlink&quot; title=&quot;备份与恢复&quot;&gt;&lt;/a&gt;备份与恢复&lt;/h2&gt;&lt;h3 id=&quot;备份&quot;&gt;&lt;a href=&quot;#备份&quot; class=&quot;headerlink&quot; title=&quot;备份&quot;&gt;&lt;/a&gt;备
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>对第一次使用mpvue的一次记录</title>
    <link href="http://yoursite.com/2018/08/04/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8mpvue%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/08/04/第一次使用mpvue的记录/</id>
    <published>2018-08-03T16:00:00.000Z</published>
    <updated>2018-08-05T12:36:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    昨晚睡前打开了半个月没打开的知乎, 看到了一个专栏文章<a href="https://zhuanlan.zhihu.com/p/40739079" target="_blank" rel="noopener">再见jquery,我的老朋友</a>,突然想到之前github传出,github已经彻底删除jquery,这似乎标志着前端已经完全进入了一个新的时代,js从最开始的小丑云,现在已经成为一个非常优秀的编程语言,开发者的目光从兼容性一步步的转向了模块化</p><p>​    前端发展如此之快,作为前端开发者对前端快速发展欣喜的同时,让我倍感压力,不能停止学习,废话就说这么多吧</p><p>​    在学校期间,先电云计算比赛3月份后的国赛上新加了一个项目 小程序开发,我们组三个人,一个安卓,一个java,还有就是我 前端, 开始的时候老师不知道把任务分给了安卓,我的朋友看了一天头皮发麻,一点都不会,我就把任务接下来了。之前看过一点vue，，看了看wxml的数据绑定，这和vue像啊，，后来用原生语言写了完整的微信小程序，对于第一次接触小程序，踩了无数的坑，深刻感受到vue真的太好用了。。。。</p><p>​    7月多在github上面偶然看到了mpvue，当时感觉眼前一亮，用vue写小程序怎么实现的，，后来看了他们的文档，感觉挺不错的，在慕课网上面看了蜗牛老师的mpvue实战项目，决定好好学习一下，看看vue+小程序是怎么样的开发体验~~~</p><p>​    首先谢谢老师，课非常不错，基本完成项目对小程序和mpvue都有不错的了解，还对koa2进行讲解，墙裂推荐！页面上主要是这样的</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FqQ2fqAMADeR-6oYREIklGI84EsE.png" alt=""></p><p>主要是数据库哪一块,跟着老师打,很多都看不懂，虽然是knex ，但是语法基本就是mysql</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = <span class="keyword">await</span> mysql(<span class="string">'books'</span>)</span><br><span class="line">    .select(<span class="string">'books.*'</span>, <span class="string">'csessioninfo.user_info'</span>) </span><br><span class="line">    .join(<span class="string">'csessioninfo'</span>, <span class="string">'books.openid'</span>, <span class="string">'csessioninfo.open_id'</span>) </span><br><span class="line">    .limit(size) </span><br><span class="line">    .offset(<span class="built_in">Number</span>(page) * size)   </span><br><span class="line">    .orderBy(<span class="string">'books.id'</span>, <span class="string">'desc'</span>)</span><br></pre></td></tr></table></figure><p>类似这样的，mysql白学了，很多都忘了，后面恶补了mysql</p><p>有些比较坑人的地方，</p><ol><li><p>添加页面需要重启（这也不算坑）</p></li><li><p>登录事件需要用@getuserinfo 官网没有说明，害得我用vue的@click调试登录bug半个月</p></li><li><p>wx原生事件不可以写在methods里面，有说明，但是还是才踩到了坑，不小心把下拉事件写到methods里面</p></li><li><p>最好不要在mpvue没有启动的时候变动代码，因为假如代码有错误，mpvue可能会卡在启动的地方</p></li><li><p>引用static里面的资源，不可以写项目路径 按build后的路径写 <code>/static/text.png</code>，而不是vue项目里面的路径</p></li><li><p>小程序内部跳转路径<code>../write/main</code>应该这么写，不可以使用vue-router很遗憾</p></li><li><p>报错<code>pages/xxx/xxx.js 出现脚本错误或者未正确调用 Page()</code>，因为vue文件不可以为空。。。</p><p>当然很多坑并不是因为mpvue，而是小程序自带的，我仅仅总结一下</p></li></ol><p>下面说说开发中感觉mpvue的优点吧</p><ol><li>使用vue开发可以组件化，感觉很舒服</li><li>对已经会vue的开发者来说，几乎没有学习成本</li><li>几乎不用关系页面配置文件，只要指定主页就好了</li></ol><p>细说的话优点就很多啦，因为基于vue，使用一个成熟的框架写小程序，是很舒服的，前期坑比较多，但是熟练了，就会感觉mpvue写小程序是，相对于原生wx语法，体验不是一个级别呢</p><p>​    总的来说，蜗牛老师的实战课程挺不错的，学会了很多，对koa也有了更好的了解</p><p>下面是我这个mpvue项目的地址</p><p><a href="https://github.com/vkcyan/wl-mpvue" target="_blank" rel="noopener">豆瓣读书微信小程序</a></p><p>​                                                        感谢美团给我们带来mpvue，希望他越来越好</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    昨晚睡前打开了半个月没打开的知乎, 看到了一个专栏文章&lt;a href=&quot;https://zhuanlan.zhihu.com/p/40739079&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;再见jquery,我的老朋友&lt;/a&gt;,突然想到之前g
      
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="mpvue" scheme="http://yoursite.com/tags/mpvue/"/>
    
  </entry>
  
  <entry>
    <title>mysql使用指南 - 基础篇</title>
    <link href="http://yoursite.com/2018/08/03/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8C%87%E5%8D%97%20-%20%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2018/08/03/mysql数据库指南 - 基础篇/</id>
    <published>2018-08-02T16:00:00.000Z</published>
    <updated>2018-08-03T11:52:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DDL-–-Data-Definition-Language-数据库定义语言"><a href="#DDL-–-Data-Definition-Language-数据库定义语言" class="headerlink" title="DDL – Data Definition Language 数据库定义语言"></a>DDL – Data Definition Language 数据库定义语言</h2><h5 id="查询当前所有数据库"><a href="#查询当前所有数据库" class="headerlink" title="查询当前所有数据库"></a>查询当前所有数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><h5 id="进入-切换数据库"><a href="#进入-切换数据库" class="headerlink" title="进入/切换数据库"></a>进入/切换数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use base;</span><br></pre></td></tr></table></figure><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database base;</span><br></pre></td></tr></table></figure><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database base;</span><br></pre></td></tr></table></figure><h3 id="mysql数据库表的数据类型"><a href="#mysql数据库表的数据类型" class="headerlink" title="mysql数据库表的数据类型"></a>mysql数据库表的数据类型</h3><p>也就是创建表的时候的数据类型</p><blockquote><p><strong>int</strong>: 整形</p><p>使用场景: 用于储存数值</p></blockquote><blockquote><p><strong>double</strong>: 浮点型 例如 double(5,2) 表示最多五位数 其中必须两位小数,及最大值为999.99</p><p>使用场景: 用于储存小数类型的值</p></blockquote><blockquote><p><strong>decimal</strong>: 浮点型,多用于在表示金额上使用的类型,因为不会出现进度丢失</p><p>使用场景: 储存精细数据</p></blockquote><blockquote><p><strong>char</strong>: 固定长度字符串类型 char(255) 长度不足补足到指定长度 过长报错</p><p>使用场景: 储存长度不变的数据 例如 身份证号 手机号 等等</p></blockquote><blockquote><p><strong>varchar</strong>: 可变长度字符串类型 varchar(65535) </p><p>使用场景: 变化的数据 (会在查询的时候 使用长度去记录长度值,所以会浪费性能,所以固长性能更好) </p></blockquote><p>mysql独有的数据类型</p><blockquote><p>text: 存储可变的文本信息 例如小说</p><p> blob: 存储可变的二进制类型  例如图片转二进制存储</p></blockquote><h3 id="表的使用命令"><a href="#表的使用命令" class="headerlink" title="表的使用命令"></a>表的使用命令</h3><h5 id="查看当前数据库的表"><a href="#查看当前数据库的表" class="headerlink" title="查看当前数据库的表"></a>查看当前数据库的表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><p>首先进入指定需要创建表数据库</p><blockquote><p>创建一个 名叫mytable的表 </p><p>表结构为:</p><ul><li>字段为定长11字节的number储存学号</li><li>字段为变长20字节的name 储蓄姓名</li><li>字段为int的age 储蓄年龄</li><li>字段为变长10字节的sex 储蓄性别</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> base;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable (</span><br><span class="line">    <span class="built_in">number</span> <span class="built_in">char</span>(<span class="number">11</span>),</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    sex <span class="built_in">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="查看表的建表语句"><a href="#查看表的建表语句" class="headerlink" title="查看表的建表语句"></a>查看表的建表语句</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> mytable</span><br></pre></td></tr></table></figure><h5 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc mytable;</span><br></pre></td></tr></table></figure><h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table mytable;</span><br></pre></td></tr></table></figure><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><blockquote><p><strong>注意: 所有的修改表操作 命令前面都是 alter table 表名</strong></p><p>这里还是很语义化的 alter 意为改变 modify意为修改</p></blockquote><h5 id="修改-–-给现有的表添加一列-字段"><a href="#修改-–-给现有的表添加一列-字段" class="headerlink" title="修改 – 给现有的表添加一列(字段)"></a>修改 – 给现有的表添加一列(字段)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> mytable <span class="keyword">add</span>(</span><br><span class="line">education <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line">//修改表mytable 添加字段education指定类型为varchar(50)</span><br></pre></td></tr></table></figure><h5 id="修改-–-给现有的表修改列-字段-类型"><a href="#修改-–-给现有的表修改列-字段-类型" class="headerlink" title="修改 – 给现有的表修改列(字段)类型"></a>修改 – 给现有的表修改列(字段)类型</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> mytable <span class="keyword">modify</span> education <span class="built_in">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h5 id="修改-–-删除指定的列-字段"><a href="#修改-–-删除指定的列-字段" class="headerlink" title="修改 – 删除指定的列(字段)"></a>修改 – 删除指定的列(字段)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> mytable <span class="keyword">drop</span> education;</span><br></pre></td></tr></table></figure><h5 id="修改-–-修改表名称"><a href="#修改-–-修改表名称" class="headerlink" title="修改 – 修改表名称"></a>修改 – 修改表名称</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> mytable <span class="keyword">rename</span> <span class="keyword">to</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><h5 id="修改-–-数据库编码"><a href="#修改-–-数据库编码" class="headerlink" title="修改 – 数据库编码"></a>修改 – 数据库编码</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> dase <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><h2 id="DML-–-Data-Manipulation-Language-数据操纵语言"><a href="#DML-–-Data-Manipulation-Language-数据操纵语言" class="headerlink" title="DML – Data Manipulation Language 数据操纵语言"></a>DML – Data Manipulation Language 数据操纵语言</h2><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><p>在数据里面所有的字符串类型必须是<strong>单引号</strong></p><blockquote><p>格式 insert into tables(? , ? , ? ,?) values(‘?’ , ‘?’ , ? , ‘?’ );</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">tables</span>(<span class="built_in">number</span>,<span class="keyword">name</span>,age,sex) <span class="keyword">values</span>(<span class="string">'0000001'</span>,<span class="string">'zhangsan'</span>,<span class="number">18</span>,<span class="string">'man'</span>);</span><br></pre></td></tr></table></figure><p>插入部分列 – 表格允许的空值的情况下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">tables</span>(<span class="built_in">number</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'0000002'</span>,<span class="string">'lisi'</span>);</span><br></pre></td></tr></table></figure><p>不给出插入列 - 默认插入所有列</p><blockquote><p>insert into tables values( ‘?’ , ‘?’ , ?, ‘?’ );</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">tables</span> <span class="keyword">values</span>(<span class="string">'0000003'</span>,<span class="string">'xiaosan'</span>,<span class="number">29</span>,<span class="string">'woman'</span>);</span><br></pre></td></tr></table></figure><h5 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h5><blockquote><p>这样不指定条件的修改会将表里面的所有字段为age都变成了20 千万注意不能不指定条件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">tables</span> <span class="keyword">set</span> age=<span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>更新 number为000001的 age 变成30</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">tables</span> <span class="keyword">set</span> age=<span class="number">30</span> <span class="keyword">where</span> <span class="built_in">number</span>=<span class="string">'0000001'</span>;</span><br></pre></td></tr></table></figure><p>更新 number为0000002 或者 name 为xiaosan 的 sex为 woman</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">tables</span> <span class="keyword">set</span> sex=<span class="string">'woman'</span> <span class="keyword">where</span> <span class="built_in">number</span>=<span class="string">'0000002'</span> <span class="keyword">or</span> <span class="keyword">name</span>=<span class="string">'xiaosan'</span>;</span><br></pre></td></tr></table></figure><p>更新 age在15 到 48之间的 age+1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">tables</span> <span class="keyword">set</span> age=age+<span class="number">1</span> <span class="keyword">where</span> age &gt; <span class="number">15</span> <span class="keyword">and</span> age &lt; <span class="number">48</span>;</span><br></pre></td></tr></table></figure><p>更新 age 在15(包括) 到40(包括)之间的 age+1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">tables</span> <span class="keyword">set</span> age=age+<span class="number">1</span> <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">40</span>;</span><br></pre></td></tr></table></figure><p>使用<strong>in</strong>语法实现多数据改动</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">tables</span> <span class="keyword">set</span> age=<span class="number">36</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">in</span>(<span class="string">'lisi'</span>,<span class="string">'xiaosan'</span>);</span><br></pre></td></tr></table></figure><p>针对表中数据为null,应该如何更改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">update</span> <span class="keyword">tables</span> <span class="keyword">set</span> age=<span class="number">30</span> <span class="keyword">where</span> age=<span class="literal">null</span>;        //这样是错误的 因为age=null会返回false!!</span><br><span class="line"><span class="comment">--------------------------------------------</span></span><br><span class="line"> <span class="keyword">update</span> <span class="keyword">tables</span> <span class="keyword">set</span> age=<span class="number">30</span> <span class="keyword">where</span> age <span class="keyword">is</span> <span class="literal">null</span>; //is 判断才是正确的</span><br></pre></td></tr></table></figure><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><p>删除表列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">tables</span> <span class="keyword">where</span> age=<span class="number">29</span>;</span><br></pre></td></tr></table></figure><h2 id="DCL-–-Data-Control-Language-数据库控制语言"><a href="#DCL-–-Data-Control-Language-数据库控制语言" class="headerlink" title="DCL – Data Control Language 数据库控制语言"></a>DCL – Data Control Language 数据库控制语言</h2><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><blockquote><p>创建用户vkcyan密码为000000指定只能通过localhost登录</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> vkcyan@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'000000'</span>;</span><br></pre></td></tr></table></figure><h5 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h5><blockquote><p>将base这个数据库里面的所有表的所有权限都给用户vkcyan</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> all <span class="keyword">on</span> base.* <span class="keyword">to</span> vkcyan@localhost;</span><br></pre></td></tr></table></figure><blockquote><p>权限有很多 create alter drop insert update delete select </p></blockquote><h5 id="取消授权"><a href="#取消授权" class="headerlink" title="取消授权"></a>取消授权</h5><blockquote><p>取消vkcyan用户的 base数据库下所有表的删除权限</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">delete</span> <span class="keyword">on</span> base.* <span class="keyword">from</span> vkcyan@localhost;</span><br></pre></td></tr></table></figure><h5 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> vkcyan@localhost;</span><br></pre></td></tr></table></figure><h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> vkcyan@localhost;</span><br></pre></td></tr></table></figure><h2 id="DQL-–-Data-Query-Language-数据查询语言DQL"><a href="#DQL-–-Data-Query-Language-数据查询语言DQL" class="headerlink" title="DQL –  Data Query Language 数据查询语言DQL"></a>DQL –  Data Query Language 数据查询语言DQL</h2><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><blockquote><ul><li>代表查询全部 </li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><blockquote><p>可以指定查询的列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,comm <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><blockquote><p>查询数据去除相同的行   <code>distinct关键字为去除重复数据</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> comm <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h5 id="列运算-数字"><a href="#列运算-数字" class="headerlink" title="列运算 - 数字"></a>列运算 - 数字</h5><blockquote><p> 查询emp表的所有信息 并且查询sal列数据*1.5 的数据  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sal,sal*1.5 from emp;</span><br></pre></td></tr></table></figure><blockquote><p>假如是无法运算的值,会将数据按0处理</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">select ename,ename+100 from emp;</span><br><span class="line"></span><br><span class="line">+--------+-----------+</span><br><span class="line">| ename  | ename+100 |</span><br><span class="line">+--------+-----------+</span><br><span class="line">| 甘宁   |       100 |</span><br><span class="line">| 黛绮丝 |       100 |</span><br><span class="line">| 殷天正 |       100 |</span><br><span class="line">| 刘备   |       100 |</span><br><span class="line">| 谢逊   |       100 |</span><br><span class="line">| 关羽   |       100 |</span><br><span class="line">| 张飞   |       100 |</span><br><span class="line">| 诸葛亮 |       100 |</span><br><span class="line">| 曾阿牛 |       100 |</span><br><span class="line">| 韦一笑 |       100 |</span><br><span class="line">| 周泰   |       100 |</span><br><span class="line">| 程普   |       100 |</span><br><span class="line">| 庞统   |       100 |</span><br><span class="line">| 黄盖   |       100 |</span><br><span class="line">+--------+-----------+</span><br></pre></td></tr></table></figure><blockquote><p> 列与列相加 这里注意 假如相加字段里面有null运算结果会变成null</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sal,comm,sal+comm <span class="keyword">from</span> emp;  //错误写法</span><br><span class="line">+<span class="comment">----------+----------+----------+</span></span><br><span class="line">| sal      | comm     | sal+comm |</span><br><span class="line">+<span class="comment">----------+----------+----------+</span></span><br><span class="line">|  8000.00 |     NULL |     NULL |</span><br><span class="line">| 16000.00 |  3000.00 | 19000.00 |</span><br><span class="line">| 12500.00 |  5000.00 | 17500.00 |</span><br><span class="line">| 29750.00 |     NULL |     NULL |</span><br><span class="line">| 12500.00 | 14000.00 | 26500.00 |</span><br><span class="line">| 28500.00 |     NULL |     NULL |</span><br><span class="line">| 24500.00 |     NULL |     NULL |</span><br><span class="line">| 30000.00 |     NULL |     NULL |</span><br><span class="line">| 50000.00 |     NULL |     NULL |</span><br><span class="line">| 15000.00 |     0.00 | 15000.00 |</span><br><span class="line">| 11000.00 |     NULL |     NULL |</span><br><span class="line">|  9500.00 |     NULL |     NULL |</span><br><span class="line">| 30000.00 |     NULL |     NULL |</span><br><span class="line">| 13000.00 |     NULL |     NULL |</span><br><span class="line">+<span class="comment">----------+----------+----------+</span></span><br><span class="line">//可以使用ifnull去处理null的数值</span><br><span class="line">mysql&gt; select sal,comm,sal+ifnull(comm,0) from emp;</span><br><span class="line">+<span class="comment">----------+----------+--------------------+</span></span><br><span class="line">| sal      | comm     | sal+ifnull(comm,0) |</span><br><span class="line">+<span class="comment">----------+----------+--------------------+</span></span><br><span class="line">|  8000.00 |     NULL |            8000.00 |</span><br><span class="line">| 16000.00 |  3000.00 |           19000.00 |</span><br><span class="line">| 12500.00 |  5000.00 |           17500.00 |</span><br><span class="line">| 29750.00 |     NULL |           29750.00 |</span><br><span class="line">| 12500.00 | 14000.00 |           26500.00 |</span><br><span class="line">| 28500.00 |     NULL |           28500.00 |</span><br><span class="line">| 24500.00 |     NULL |           24500.00 |</span><br><span class="line">| 30000.00 |     NULL |           30000.00 |</span><br><span class="line">| 50000.00 |     NULL |           50000.00 |</span><br><span class="line">| 15000.00 |     0.00 |           15000.00 |</span><br><span class="line">| 11000.00 |     NULL |           11000.00 |</span><br><span class="line">|  9500.00 |     NULL |            9500.00 |</span><br><span class="line">| 30000.00 |     NULL |           30000.00 |</span><br><span class="line">| 13000.00 |     NULL |           13000.00 |</span><br><span class="line">+<span class="comment">----------+----------+--------------------+</span></span><br></pre></td></tr></table></figure><blockquote><p>查询字段将null替换成任意值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ename,ifnull(mgr,'boss')from emp;</span><br><span class="line">+<span class="comment">--------+--------------------+</span></span><br><span class="line">| ename  | ifnull(mgr,'boss') |</span><br><span class="line">+<span class="comment">--------+--------------------+</span></span><br><span class="line">| 甘宁   | 1013               |</span><br><span class="line">| 黛绮丝 | 1006               |</span><br><span class="line">| 殷天正 | 1006               |</span><br><span class="line">| 刘备   | 1009               |</span><br><span class="line">| 谢逊   | 1006               |</span><br><span class="line">| 关羽   | 1009               |</span><br><span class="line">| 张飞   | 1009               |</span><br><span class="line">| 诸葛亮 | 1004               |</span><br><span class="line">| 曾阿牛 | boss               |</span><br><span class="line">| 韦一笑 | 1006               |</span><br><span class="line">| 周泰   | 1008               |</span><br><span class="line">| 程普   | 1006               |</span><br><span class="line">| 庞统   | 1004               |</span><br><span class="line">| 黄盖   | 1007               |</span><br><span class="line">+<span class="comment">--------+--------------------+</span></span><br></pre></td></tr></table></figure><h5 id="列运算-文字"><a href="#列运算-文字" class="headerlink" title="列运算 - 文字"></a>列运算 - 文字</h5><blockquote><p> concat 连接字符串</p><p>as 起别名</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat ('我叫',ename,' ,我的工作是',job,',我的工资是',sal) as '描述' from emp;</span><br><span class="line">+<span class="comment">-------------------------------------------------+</span></span><br><span class="line">| 描述                                            |</span><br><span class="line">+<span class="comment">-------------------------------------------------+</span></span><br><span class="line">| 我叫甘宁 ,我的工作是文员,我的工资是8000.00      |</span><br><span class="line">| 我叫黛绮丝 ,我的工作是销售员,我的工资是16000.00 |</span><br><span class="line">| 我叫殷天正 ,我的工作是销售员,我的工资是12500.00 |</span><br><span class="line">| 我叫刘备 ,我的工作是经理,我的工资是29750.00     |</span><br><span class="line">| 我叫谢逊 ,我的工作是销售员,我的工资是12500.00   |</span><br><span class="line">| 我叫关羽 ,我的工作是经理,我的工资是28500.00     |</span><br><span class="line">| 我叫张飞 ,我的工作是经理,我的工资是24500.00     |</span><br><span class="line">| 我叫诸葛亮 ,我的工作是分析师,我的工资是30000.00 |</span><br><span class="line">| 我叫曾阿牛 ,我的工作是董事长,我的工资是50000.00 |</span><br><span class="line">| 我叫韦一笑 ,我的工作是销售员,我的工资是15000.00 |</span><br><span class="line">| 我叫周泰 ,我的工作是文员,我的工资是11000.00     |</span><br><span class="line">| 我叫程普 ,我的工作是文员,我的工资是9500.00      |</span><br><span class="line">| 我叫庞统 ,我的工作是分析师,我的工资是30000.00   |</span><br><span class="line">| 我叫黄盖 ,我的工作是文员,我的工资是13000.00     |</span><br><span class="line">+<span class="comment">-------------------------------------------------+</span></span><br></pre></td></tr></table></figure><blockquote><p>其别名 as   要注意! 一般情况下 as 省略也可以运行</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ename as 姓名,job as 工作 from emp;</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br><span class="line">| 姓名   | 工作   |</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br><span class="line">| 甘宁   | 文员   |</span><br><span class="line">| 黛绮丝 | 销售员 |</span><br><span class="line">| 殷天正 | 销售员 |</span><br><span class="line">| 程普   | 文员   |</span><br><span class="line">| 庞统   | 分析师 |</span><br><span class="line">| 黄盖   | 文员   |</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br><span class="line">mysql&gt; select ename 姓名,job 工作 from emp;</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br><span class="line">| 姓名   | 工作   |</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br><span class="line">| 甘宁   | 文员   |</span><br><span class="line">| 黛绮丝 | 销售员 |</span><br><span class="line">| 殷天正 | 销售员 |</span><br><span class="line">| 程普   | 文员   |</span><br><span class="line">| 庞统   | 分析师 |</span><br><span class="line">| 黄盖   | 文员   |</span><br><span class="line">+<span class="comment">--------+--------+</span></span><br></pre></td></tr></table></figure><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><blockquote><p>查询sal字段大于20000的</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt;<span class="number">20000</span>;</span><br></pre></td></tr></table></figure><blockquote><p>查询comm字段不为null的</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><blockquote><p>查询sal找20000到30000之间的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where sal between 20000 and 30000;</span><br></pre></td></tr></table></figure><blockquote><p>查询是字段job 是经理和分析师的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where job in (&apos;经理&apos;,&apos;分析师&apos;);</span><br></pre></td></tr></table></figure><p>模糊查询</p><blockquote><p>查询姓张的两个字的</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'张_'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>查询名字是两个字的  //下划线表示匹配1个字符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">'__'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>查询以job列某个字符结尾的指定列  //%表示匹配多个字符</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where job like &apos;%员&apos;;</span><br><span class="line">select * from emp where job like &apos;%&apos;;</span><br></pre></td></tr></table></figure><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><blockquote><p>按指定字段排序(默认升序)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal;</span><br><span class="line">//在emp表里面 按 order 来进行排序</span><br></pre></td></tr></table></figure><blockquote><p>升序</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><blockquote><p>降序</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><blockquote><p>假如一列比较相同的情况下 可以在进行比较</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">asc</span>,comm <span class="keyword">desc</span>;</span><br><span class="line">//假如sal字段相同就降序比较comm字段</span><br></pre></td></tr></table></figure><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><blockquote><p>算出一列的有效行数遇到null就跳过</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> emp;</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| count(*) |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">|       14 |</span><br><span class="line">+<span class="comment">----------+</span></span><br></pre></td></tr></table></figure><blockquote><p>算出一列的值 遇到null会跳过</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select sum(sal) from emp;</span><br><span class="line">+-----------+</span><br><span class="line">| sum(sal)  |</span><br><span class="line">+-----------+</span><br><span class="line">| 290250.00 |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure><blockquote><p>算出一列的最大值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select max(sal) from emp;</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| max(sal) |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| 50000.00 |</span><br><span class="line">+<span class="comment">----------+</span></span><br></pre></td></tr></table></figure><blockquote><p>算出一列的最小值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select min(sal) from emp;</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| min(sal) |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">|  8000.00 |</span><br><span class="line">+<span class="comment">----------+</span></span><br></pre></td></tr></table></figure><blockquote><p>算出平均值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select avg(sal) from emp;</span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">| avg(sal)     |</span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">| 20732.142857 |</span><br><span class="line">+<span class="comment">--------------+</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 as 拼接</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select count(*) as 人数,sum(sal) as 工资总和,max(sal) as 最高工资,min(sal) as 最低工资,</span><br><span class="line">avg(sal) as 平均工资 from emp;</span><br><span class="line">+<span class="comment">------+-----------+----------+----------+--------------+</span></span><br><span class="line">| 人数 | 工资总和  | 最高工资 | 最低工资 | 平均工资      |</span><br><span class="line">+<span class="comment">------+-----------+----------+----------+--------------+</span></span><br><span class="line">|   14 | 290250.00 | 50000.00 |  8000.00 | 20732.142857 |</span><br><span class="line">+<span class="comment">------+-----------+----------+----------+--------------+</span></span><br></pre></td></tr></table></figure><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><blockquote><p>查询个职位的数量,以及最高工资  这里注意除了分组列 其他都是聚合函数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> job,<span class="keyword">count</span>(*),<span class="keyword">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line">+<span class="comment">--------+----------+----------+</span></span><br><span class="line">| job    | count(*) | max(sal) |</span><br><span class="line">+<span class="comment">--------+----------+----------+</span></span><br><span class="line">| 分析师 |        2 | 30000.00 |</span><br><span class="line">| 文员   |        4 | 13000.00 |</span><br><span class="line">| 经理   |        3 | 29750.00 |</span><br><span class="line">| 董事长 |        1 | 50000.00 |</span><br><span class="line">| 销售员 |        4 | 16000.00 |</span><br><span class="line">+<span class="comment">--------+----------+----------+</span></span><br></pre></td></tr></table></figure><blockquote><p>按组查询emp表 deptnn字段  sal大于1500的全部数量,并按组分好</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select deptno,count(*) from emp where sal&gt;15000 group by deptno;</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">| deptno | count(*) |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">|     10 |        2 |</span><br><span class="line">|     20 |        3 |</span><br><span class="line">|     30 |        2 |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br></pre></td></tr></table></figure><blockquote><p> 按组查询emp表 deptnn字段  sal大于1500的全部数量,并按组分好 分好后把大于2的留下</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select deptno,count(*) from emp where sal&gt;15000 group by deptno having count(*)&gt;2;</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">| deptno | count(*) |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br><span class="line">|     20 |        3 |</span><br><span class="line">+<span class="comment">--------+----------+</span></span><br></pre></td></tr></table></figure><h5 id="limit子句-方言"><a href="#limit子句-方言" class="headerlink" title="limit子句(方言)"></a>limit子句(方言)</h5><blockquote><p>主要用于分页  limit 0,5 从0开始打印5行数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from emp limit 0,5;                                             </span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+----------+--------+  </span></span><br><span class="line">| empno | ename  | job    | mgr  | hiredate   | sal      | COMM     | deptno |  </span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+----------+--------+  </span></span><br><span class="line">|  1001 | 甘宁   | 文员   | 1013 | 2000-12-17 |  8000.00 |     NULL |     20 |      </span><br><span class="line">|  1002 | 黛绮丝 | 销售员 | 1006 | 2001-02-20 | 16000.00 |  3000.00 |     30 |        </span><br><span class="line">|  1003 | 殷天正 | 销售员 | 1006 | 2001-02-22 | 12500.00 |  5000.00 |     30 |        </span><br><span class="line">|  1004 | 刘备   | 经理   | 1009 | 2001-04-02 | 29750.00 |     NULL |     20 |      </span><br><span class="line">|  1005 | 谢逊   | 销售员 | 1006 | 2001-09-28 | 12500.00 | 14000.00 |     30 |       </span><br><span class="line">+<span class="comment">-------+--------+--------+------+------------+----------+----------+--------+</span></span><br></pre></td></tr></table></figure><p>例如一页数据为10  查询第三页</p><p>select * from  limit 20 ,10</p><p>公式:  (查询页 - 1)  * 每页记录数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DDL-–-Data-Definition-Language-数据库定义语言&quot;&gt;&lt;a href=&quot;#DDL-–-Data-Definition-Language-数据库定义语言&quot; class=&quot;headerlink&quot; title=&quot;DDL – Data Defin
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>call apply的模拟实现</title>
    <link href="http://yoursite.com/2018/07/30/call%20apply%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/07/30/call apply的模拟实现/</id>
    <published>2018-07-29T16:00:00.000Z</published>
    <updated>2018-07-31T02:18:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="call-apply的功能类似-先从call说起"><a href="#call-apply的功能类似-先从call说起" class="headerlink" title="call apply的功能类似,先从call说起"></a>call apply的功能类似,先从call说起</h2><p>借助大神的话: call()方法在使用一个指定this值和若干个指定的参数值的前提下调用某个函数和方法(真的难理解)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">value :<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line">bar.call(foo)</span><br></pre></td></tr></table></figure><p>这里的this就指向foo了 改变JavaScript对象的this就这么简单</p><p>于是是不是就像下面的代码,实现一样的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.bar(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>这里this就指向foo了, 虽然实现了功能, 但是添加了一个属性, 这是不允许的, 所以要在最后删除这个属性</p><p>分析一下怎么实现类似call的功能:</p><ol><li>将函数设为对象的属性</li><li>指定该函数</li><li>删除该函数</li></ol><p>假如我要自己实现是不是这样的思路?</p><p>那么内部应该是这样的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo.fun = bar//设置为对象</span><br><span class="line">foo.fun()    //执行函数</span><br><span class="line">delete foo.fun  //删除函数</span><br></pre></td></tr></table></figure><p>fun是对象名字,随便起</p><h3 id="第一版本的模拟call-实现"><a href="#第一版本的模拟call-实现" class="headerlink" title="第一版本的模拟call()实现"></a>第一版本的模拟call()实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//首先获取call函数  用this,因为这里是bar调用了他 所以this指向bar</span></span><br><span class="line">  context.fun = <span class="keyword">this</span>      <span class="comment">//这里将this里面的方法加入到了context里面去了</span></span><br><span class="line">                          <span class="comment">//相当与context变成这样</span></span><br><span class="line">                          <span class="comment">/*context = &#123;</span></span><br><span class="line"><span class="comment">                            value: 1,</span></span><br><span class="line"><span class="comment">                            fun: function ()&#123;</span></span><br><span class="line"><span class="comment">                              console.log(this.value)</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment">                          &#125;*/</span></span><br><span class="line">  context.fun()</span><br><span class="line">  <span class="keyword">delete</span> context.fun;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.call2(foo)</span><br></pre></td></tr></table></figure><p>后面还要考虑给定参数执行函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">    <span class="built_in">console</span>.log(age)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.call(foo, <span class="string">'kevin'</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>这里第一问题 参数不固定怎么办?</p><p>办法:Arguments 对象里面取值,取出第二个到最后一个(这里实现方法是重点),然后放入数组</p><p>还有一点需要注意 当传入null的时候 给他指定为windos</p><h3 id="第二版本"><a href="#第二版本" class="headerlink" title="第二版本"></a>第二版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>)</span>&#123;</span><br><span class="line">  context.fun = <span class="keyword">this</span> || <span class="built_in">window</span>  <span class="comment">//这里的this是bar函数</span></span><br><span class="line">  <span class="keyword">var</span> datas = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;  <span class="comment">//这里这里默认第一个参数为对象 所以取1后面</span></span><br><span class="line">    datas.push(<span class="string">'arguments['</span> + i + <span class="string">']'</span>); <span class="comment">//最主要就是通过arguments[' + i + ']来过去参数字符串 再使用eval来解开,实现传参</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">'context.fun('</span>+datas+<span class="string">')'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  var foo = &#123;</span></span><br><span class="line"><span class="comment">    value: 1,</span></span><br><span class="line"><span class="comment">    fun: function (name,age)&#123;</span></span><br><span class="line"><span class="comment">      console.log("name---" + name)</span></span><br><span class="line"><span class="comment">      console.log("age---" + age)</span></span><br><span class="line"><span class="comment">      console.log(this.value);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">delete</span> context.fun</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"name---"</span>+name)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"age---"</span>+age)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.call2(foo, <span class="string">'kevin'</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------------</span><br><span class="line">name---kevin</span><br><span class="line">age--<span class="number">-18</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>这里基本已经完成了大致call的核心代码</p><h2 id="后面是apply的是模拟实现代码"><a href="#后面是apply的是模拟实现代码" class="headerlink" title="后面是apply的是模拟实现代码"></a>后面是apply的是模拟实现代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply1 = <span class="function"><span class="keyword">function</span> (<span class="params">context,arr</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//let context = Object(context) || window</span></span><br><span class="line">  context.fun = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">if</span>(!arr)&#123;   <span class="comment">//假如arr不存在直接执行</span></span><br><span class="line">    result = context.fun()</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> args = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      args.push(<span class="string">'arr['</span>+i+<span class="string">']'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'context.fun('</span>+args+<span class="string">')'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"name---"</span>+name)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"age---"</span>+age)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.apply1(foo, [<span class="string">'kevin'</span>, <span class="number">18</span>]);</span><br></pre></td></tr></table></figure><p>每次看<a href="https://github.com/mqyqingfeng" target="_blank" rel="noopener">冴羽</a>大神的github都深有启发,看完每个小结都会有一个疑问</p><p>这些大佬是怎么学习的,怎么做到对js理解的如此透彻,….( = = )</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;call-apply的功能类似-先从call说起&quot;&gt;&lt;a href=&quot;#call-apply的功能类似-先从call说起&quot; class=&quot;headerlink&quot; title=&quot;call apply的功能类似,先从call说起&quot;&gt;&lt;/a&gt;call apply的功能类
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>(flex) UI 布局</title>
    <link href="http://yoursite.com/2018/07/30/flex%20%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/07/30/flex 布局/</id>
    <published>2018-07-29T16:00:00.000Z</published>
    <updated>2018-07-30T02:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flex-UI-布局"><a href="#flex-UI-布局" class="headerlink" title="(flex) UI 布局"></a>(flex) UI 布局</h1><p>flex布局无论在pc端还是mobile端或者小程序端都是非常好的布局选择,完全可以代替浮动,非常有学习的必要</p><p>在flex上面的下面三个教程就可以学会了</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox" target="_blank" rel="noopener">MDN上对flex布局的理解</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">flex阮一峰大神教程-1</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">flex阮一峰大神教程-2</a></p><p>下面的是小程序端的</p><blockquote><p>index.wxml</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span> </span><br><span class="line">      1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span> </span><br><span class="line">      2</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span> </span><br><span class="line">      3</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'item'</span>&gt;</span> </span><br><span class="line">      4</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>index.wxss</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">page</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#FFC0CB</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: rosybrown;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>界面是这样的</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FqayVxBDbAXexHbrKw1recSFN5Kw.png" alt=""></p><p>这是默认状态 主轴是从左到右 交叉轴是从上到下</p><p>我们可以改变主轴和交叉轴</p><blockquote><p><strong>flex-direction  决定元素的排列方向</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会变成这样</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FkW-7r4EjW9oTn9NTkniOQECpo4o.png" alt=""></p><p>主轴和交叉轴改变方向</p><blockquote><p>flex-direction 有两种属性 <code>column</code> <code>row</code></p><p>row 为 <code>默认属性</code> 为横向排列 主轴是从左到右 交叉轴是从上到下</p><p> column 为竖向排列            主轴是从上到下  交叉轴是从左到右</p></blockquote><blockquote><p><strong>flex-warp   决定元素如何换行(排列不下的情况下)</strong></p></blockquote><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fgm0OvDKvk8VyeGzAXuXxXgS--Vq.png" alt=""></p><p>将wxml里面的view复制粘贴</p><p>这里明显看到 元素被挤变形了 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">page&#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background-color: #FFC0CB;</span><br><span class="line">&#125;</span><br><span class="line">.container&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 500px;</span><br><span class="line">  display: flex;</span><br><span class="line">   flex-direction: row;</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line">   flex-direction 有两种属性 column row row 为默认属性为横向排列 column 为竖向排列 </span><br><span class="line">   当是column的时候  主轴是从上到下  交叉轴是从左到右</span><br><span class="line">   当是row的时候 主轴是从做右 交叉轴是从上到下</span><br><span class="line">  */</span><br><span class="line">  /* flex-wrap: wrap; */</span><br><span class="line">  /* flex-warp 主控制时候换行 默认是nowarp 不换行 还有 warp 换行 warp-reverse 行数翻转*/</span><br><span class="line">  /* flex-flow: row wrap; */</span><br><span class="line">  /* flex-flow说 flex-direction flex-warp的缩写 可以实现上面的参数 简写 */</span><br><span class="line">  /* justify-content: space-between; */</span><br><span class="line">  /* 主轴对齐 justify-content:center 居中</span><br><span class="line">                            flex-start 默认左对齐</span><br><span class="line">                            flex-end 右对齐</span><br><span class="line">                            space-round 让间距相等</span><br><span class="line">                            space-between 左右不留间距</span><br><span class="line">  */</span><br><span class="line">  /* align-items: stretch; */</span><br><span class="line">  /* align-items: flex-start 默认在交叉轴上方</span><br><span class="line">                  flex-end   交叉轴下方排列</span><br><span class="line">                  center     在交叉轴中间排列</span><br><span class="line">                  stretch    当不设置高度的时候 会自动给高度</span><br><span class="line">  */</span><br><span class="line">&#125;</span><br><span class="line">.item&#123;</span><br><span class="line">  width: 100rpx;</span><br><span class="line">  height: 100rpx;</span><br><span class="line">  background-color: rosybrown;</span><br><span class="line">  border: 1px solid #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本上正常情况下都可以使用的居中布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br><span class="line"><span class="selector-tag">align-items</span><span class="selector-pseudo">:center</span>;</span><br></pre></td></tr></table></figure><p>​                                                        –多学习,多总结,多努力,未来很美好</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;flex-UI-布局&quot;&gt;&lt;a href=&quot;#flex-UI-布局&quot; class=&quot;headerlink&quot; title=&quot;(flex) UI 布局&quot;&gt;&lt;/a&gt;(flex) UI 布局&lt;/h1&gt;&lt;p&gt;flex布局无论在pc端还是mobile端或者小程序端都是非常好的布
      
    
    </summary>
    
      <category term="flex" scheme="http://yoursite.com/categories/flex/"/>
    
    
      <category term="flex" scheme="http://yoursite.com/tags/flex/"/>
    
      <category term="css布局" scheme="http://yoursite.com/tags/css%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
</feed>
